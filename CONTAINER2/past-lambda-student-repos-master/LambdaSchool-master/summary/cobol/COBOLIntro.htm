<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <meta name="GENERATOR" content="Mozilla/4.0 [en] (WinNT; I) [Netscape]" />
    <title>Introduction to COBOL</title>
  </head>
  <body
    text="#000000"
    bgcolor="#FFFFFF"
    link="#0000FF"
    vlink="#FF0000"
    alink="#009B00"
  >
    <table border="1" width="715" cellspacing="0">
      <tr>
        <td>
          <table width="710" cellpadding="4" cellspacing="0" border="0">
            <tr>
              <td
                valign="top"
                align="left"
                bgcolor="#FFFFFF"
                colspan="2"
                height="517"
              >
                <center>
                  <h2>
                    <img
                      src="Resources/pics/t-CobolTut.gif"
                      width="173"
                      height="59"
                    />
                  </h2>
                </center>
                <center>
                  <h2>Introduction to COBOL</h2>
                  <hr />
                </center>
                <table border="0" width="700" vspace="15">
                  <tr>
                    <td width="3%" valign="TOP" height="44">&nbsp;</td>
                    <td width="4%" valign="TOP" height="44">
                      <img
                        src="/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" height="44">
                      <b><a href="#intro" target="">Introduction</a><br /> </b
                      ><font size="-1"
                        >Unit aims, objectives, prerequisites.</font
                      ><br />
                    </td>
                  </tr>
                  <tr>
                    <td width="3%" valign="TOP" height="44">&nbsp;</td>
                    <td width="4%" valign="TOP" height="44">
                      <img
                        src="/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" valign="top" height="44">
                      <p>
                        <b
                          ><a href="#part1" target="">What is COBOL?</a
                          ><br /> </b
                        ><font size="-1"
                          >A brief introduction to the COBOL programming
                          language. A historical overview. COBOL's dominance in
                          the business computing domain. Characteristics of
                          COBOL applications. Some reasons for COBOL's
                          success.</font
                        ><br />
                      </p>
                    </td>
                  </tr>
                  <tr>
                    <td width="3%" valign="TOP" height="46">&nbsp;</td>
                    <td width="4%" valign="TOP" height="46">
                      <img
                        src="/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" valign="top" height="46">
                      <div align="left">
                        <p>
                          <b
                            ><a href="#part2" target=""
                              >Introduction to Programming </a
                            ><br /> </b
                          ><font size="-1"
                            >This section provides a gentle introduction to
                            programing in general and to programming in COBOL in
                            particular by means of writing some simple COBOL
                            programs.<br />
                          </font>
                        </p>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td width="3%" valign="TOP" height="56">&nbsp;</td>
                    <td width="4%" valign="TOP" height="56">
                      <img
                        src="/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" height="56">
                      <div align="left">
                        <p>
                          <b
                            ><a href="#part3" target="">COBOL basics</a
                            ><br /> </b
                          ><font size="-1"
                            >This section presents the fundamentals of
                            constructing COBOL programs. It explains the
                            notation used in COBOL syntax diagrams, enumerates
                            the COBOL coding rules, and examines the
                            hierarchical structure of COBOL programs.</font
                          ><font size="-1"><br /> </font>
                        </p>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td width="3%" valign="TOP" height="52">&nbsp;</td>
                    <td width="4%" valign="TOP" height="52">
                      <img
                        src="/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" height="52">
                      <div align="left">
                        <p>
                          <b
                            ><a href="#part4" target="">The Four Divisions</a
                            ><br /> </b
                          ><font size="-1"
                            >Provides an introduction to the structure and
                            purpose of the four COBOL divisions.<br />
                          </font>
                        </p>
                      </div>
                    </td>
                  </tr>
                </table>
                <hr />
              </td>
            </tr>
            <tr>
              <td
                valign="top"
                align="LEFT"
                bgcolor="#993300"
                colspan="2"
                height="27"
              >
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="intro"></a
                    ><font face="Arial, Helvetica, sans-serif"
                      >Introduction</font
                    ></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td valign="top" width="175" bgcolor="#FFFFCC" height="115">
                <h4>
                  <font color="#993300" face="Arial, Helvetica, sans-serif"
                    >Aims</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="115">
                <div align="center">
                  <p align="left">
                    To provide a brief introduction to the programming language
                    COBOL. To provide a context in which its uses might be
                    understood. To introduce the Metalanguage used to describe
                    syntactic elements of the language. To provide an
                    introduction to the major structures present in a COBOL
                    program.
                  </p>
                </div>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="top"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="244"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Objectives</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="244">
                <p>By the end of this unit you should -</p>
                <ol>
                  <li>Know what the acronym COBOL stands for.</li>
                  <li>
                    Be aware of the significance of COBOL in the marketplace.
                  </li>
                  <li>Understand some of the reasons for COBOL's success.</li>
                  <li>
                    Be able to understand COBOL Metalanguage syntax diagrams.
                  </li>
                  <li>Be aware of the COBOL coding rules</li>
                  <li>Understand the structure of COBOL programs</li>
                  <li>
                    Understand the purpose of the
                    <font size="-1">IDENTIFICATION</font>,
                    <font size="-1">ENVIRONMENT</font>,
                    <font size="-1">DATA</font> and
                    <font size="-1">PROCEDURE </font>divisions.
                  </li>
                </ol>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="top"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="69"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Prerequisites</font
                  >
                </h4>
              </td>
              <td width="525" height="69" valign="top">
                <p>None. This is the first unit in the course.</p>
                <p>&nbsp;</p>
              </td>
            </tr>
            <tr>
              <td valign="top" align="left" bgcolor="#FFFFFF" colspan="2">
                <div align="center">
                  <hr />
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" align="LEFT" bgcolor="#993300" colspan="2">
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="part1"></a>
                    <font face="Arial, Helvetica, sans-serif"
                      >What is COBOL?</font
                    ></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="276"
              >
                <h4>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    ><b>Introduction</b></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="276">
                <p>
                  COBOL is a high-level programming language first developed by
                  the CODASYL Committee (<b>Co</b>nference on <b>Da</b>ta
                  <b>Sy</b>stems <b>L</b>anguages) in 1960. Since then,
                  responsibility for developing new COBOL standards has been
                  assumed by the American National Standards Institute (ANSI).
                </p>
                <p>
                  Three ANSI standards for COBOL have been produced: in 1968,
                  1974 and 1985. A new COBOL standard introducing
                  object-oriented programming to COBOL, is due within the next
                  few years.
                </p>
                <p>
                  The word <b>COBOL</b> is an acronym that stands for
                  <b>CO</b>mmon <b>B</b>usiness <b>O</b>riented <b>L</b>anguage.
                  As the the expanded acronym indicates, COBOL is designed for
                  developing business, typically file-oriented, applications. It
                  is not designed for writing systems programs. For instance you
                  would not develop an operating system or a compiler using
                  COBOL.
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="337"
              >
                <h4>
                  <font color="#800000"
                    ><b
                      ><font face="Arial, Helvetica, sans-serif"
                        >How widely used is COBOL?
                      </font></b
                    ></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="337">
                <p>
                  For over four decades COBOL has been the dominant programming
                  language in the business computing domain. In that time it it
                  has seen off the challenges of a number of other languages
                  such as PL1, Algol68, Pascal, Modula, Ada, C, C++. All these
                  languages have found a niche but none has yet displaced COBOL.
                  Two recent challengers though, Java and Visual Basic, are
                  proving to be serious contenders.
                </p>
                <p>
                  COBOL's dominance in underlined by the reports from the
                  Gartner group.
                </p>
                <blockquote>
                  <p>
                    In 1997 they estimated that there were about 300 billion
                    lines of computer code in use in the world. Of that they
                    estimated that about 80% (240 billion lines) were in COBOL
                    and 20% (60 billion lines) were written in all the other
                    computer languages combined [<font size="-1"
                      ><a href="#brown">Brown</a></font
                    >].
                  </p>
                  <p>
                    In 1999 they reported that over 50% of all new
                    mission-critical applications were still being done in COBOL
                    and their recent estimates indicate that through 2004-2005
                    15% of all new applications (5 billion lines) will be
                    developed in COBOL while 80% of <b>all</b> deployed
                    applications will include extensions to existing legacy
                    (usually COBOL) programs.
                  </p>
                  <p>
                    Gartner estimates for 2002 are that there are about two
                    million COBOL programmers world-wide compared to about about
                    one million Java programmers and one million C++
                    programmers.
                  </p>
                </blockquote>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="57"
              >
                <font face="Arial, Helvetica, sans-serif" color="#800000"
                  ><b>Surprised by COBOL's success?</b></font
                >
              </td>
              <td width="525" valign="top" height="57">
                <p>
                  People are often surprised when presented with the evidence
                  for COBOL's dominance in the market place. The hype that
                  surrounds some computer languages would persuade you to
                  believe that most of the production business applications in
                  the world are written in Java, C, C++ or Visual Basic and that
                  only a small percentage are written in COBOL. In fact, the
                  reverse is actually the case.
                </p>
                <p>
                  One reason for this misconception lies in the difference
                  between the vertical and the horizontal software markets.
                </p>
                <p>
                  In the vertical software market (sometimes called
                  &quot;bespoke&quot; software) applications cost many millions
                  of dollars to produce, are tailored to a specified company,
                  encapsulate the business rules of that company, and only a
                  limited number of copies of the software may be in use. A good
                  example of this kind of application is the DoD MRP II system.
                  This system is &quot;used to manage almost 550,000 spare and
                  repair parts and equipment items with an inventory value of
                  $28 billion. The system runs on Amdahl mainframes at multiple
                  locations throughout the U.S. and contains over 4,000,000
                  lines of COBOL code.&quot; [<font size="-1"
                    >http://www.uppermohawkinc.com/corporate_capabilities.htm</font
                  >]
                </p>
                <p>
                  In the horizontal software market, applications may still cost
                  millions of dollars to produce but thousands, and in some
                  cases millions, of copies of the software are in use. As a
                  result, these applications often have a very high profile, a
                  short life span, and a relatively low per-copy replacement
                  cost. The Microsoft Office suite (Word, Excel, Access) is an
                  example of an application in the horizontal software market.
                  Because of the highly competitive nature of this marketplace
                  considerations of speed, size and efficiency often make
                  languages like C or C++ the language of choice for creating
                  these applications.
                </p>
                <p>
                  Applications written for the vertical market, on the other
                  hand, often have a low profile (because they are usually
                  written for use in one particular company), a very high
                  per-copy replacement cost, and consequently, a very long life
                  span. For example, the cost of replacing COBOL code has been
                  estimated at approximately twenty five dollars ($25) per line
                  of code. At this rate, the cost of replacing the DoD MRP II
                  system mentioned above, with a system written in some other
                  language, would be some one hundred million dollars
                  ($100,000,000). The importance of ease of maintenance often
                  makes COBOL the language of choice for these applications.
                </p>
                <p>
                  The high visibility of horizontal applications like Microsoft
                  Word or Excel persuades people that the languages used to
                  write these applications are the market leaders. But however
                  many copies of Excel are sold, it is just a single application
                  produced by a limited number of programmers. Many more
                  programmers are involved in coding or maintaining one off,
                  &quot;bespoke&quot;, applications. And these programmers
                  generally write their programs in COBOL.
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="423"
              >
                <p>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    ><b>Some characteristics of COBOL applications</b></font
                  >
                </p>
                <p>&nbsp;</p>
              </td>
              <td width="525" valign="top" height="423">
                <p>
                  As exemplified by the DoD MRP II example above, COBOL
                  applications are often very large.Many COBOL applications
                  consist of more than 1,000,000 lines of code - with 6,000,000+
                  line applications not considered unusually large in many
                  shops.
                </p>
                <p>
                  COBOL applications are also very long-lived.The huge
                  investment in creating a software application consisting of
                  some millions of lines of COBOL code means that the
                  application cannot simply be discarded when some new
                  programming language or technology appears. As a consequence
                  business applications between 10 and 30 years-old are common.
                  This accounts for the predominance of COBOL programs in the
                  year 2000 problem (12,000,000 COBOL applications vs 375,000 C
                  and C++ applications in the US alone - [<font size="-1"
                    ><a href="#capers">Capers Jones</a></font
                  >]). Twenty years ago when programmers were writing these
                  applications they just didn't anticipate that they would last
                  into this millennium.
                </p>
                <p>
                  COBOL applications often run in critical areas of business.
                  For instance, over 95% of finance&#150;insurance data is
                  processed with COBOL [<font size="-1"
                    ><a href="#arranga">In Cobol&#146;s Defense</a>].</font
                  >
                  The serious financial and legal consequences that can result
                  from an application failure is one reason for the near panic
                  over the year 2000 problem.
                </p>
                <p>
                  COBOL applications often deal with enormous volumes of
                  data.Single production files and databases measured in
                  terabytes are not uncommon.
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="1690"
              >
                <font face="Arial, Helvetica, sans-serif" color="#800000"
                  ><b
                    >Some characteristics that contribute to COBOL's success</b
                  ></font
                >
              </td>
              <td width="525" valign="top" height="1690">
                <p>
                  <b>COBOL is self-documenting</b><br />
                  One of the design goals for COBOL was to make it possible for
                  non-programmers such as supervisors, managers and users, to
                  read and understand COBOL code. As a result, COBOL contains
                  such English-like structural elements as verbs, clauses,
                  sentences, sections and divisions. As it happens, this design
                  goal was not realized. Managers and users nowadays do not read
                  COBOL programs. Computer programs are just too complex for
                  most laymen to understand them, however familiar the syntactic
                  elements. But the design goal and its effect on COBOL syntax
                  has had one important side-effect. It has made COBOL the most
                  readable, understandable and self-documenting programming
                  language in use today. It has also made it the most verbose.
                </p>
                <p>
                  It is easy for programmers unused to the business programming
                  paradigm, where programming with a view to ease of maintenance
                  is very important, to dismiss the advantage that COBOL's
                  readability imparts. Not only does this readability generally
                  assist the maintenance process but the older a program gets
                  the more valuable this readability becomes.
                </p>
                <p>
                  When programs are new, both the in-program comments and the
                  external documentation accurately reflect the program code.
                  But over time, as more and more revisions are applied to the
                  code, it gets out of step with the documentation until the
                  documentation is actually a hindrance to maintenance rather
                  than a help. The self-documenting nature of COBOL means that
                  this problem is not as severe with COBOL programs as it is
                  with other languages
                </p>
                <p>
                  Readers who are familiar with C or C++ or Java might want to
                  consider how difficult it becomes to maintain programs written
                  in these languages. C programs that you have written yourself
                  are difficult enough to understand when you come back to them
                  six months later. Consider how much more difficult it would be
                  to understand a program that had been written fifteen years
                  previously, by someone else, and which had since been amended
                  and added to by so many others that the documentation no
                  longer accurately reflects the program code. This is a
                  nightmare still awaiting maintenance programmers of the future
                </p>
                <p>
                  <b>COBOL is simple<br /> </b>COBOL is a simple language (no
                  pointers, no user defined functions, no user defined types)
                  with a limited scope of function. It encourages a simple
                  straightforward programming style. Curiously enough though,
                  despite its limitations, COBOL has proven itself to be well
                  suited to its targeted problem domain (business computing).
                  Most COBOL programs operate in a domain where the program
                  complexity lies in the business rules that have to be encoded
                  rather than in the sophistication of the data structures or
                  algorithms required. And in cases where sophisticated
                  algorithms are required COBOL usually meets the need with an
                  appropriate verb such as the <font size="-1">SORT</font> and
                  the <font size="-1">SEARCH</font>.
                </p>
                <p>
                  We noted above that COBOL is a simple language with a limited
                  scope of function. And that is the way it used to be but the
                  introduction of OO-COBOL has changed all that. OO-COBOL
                  retains all the advantages of previous versions but now
                  includes -
                </p>
                <ul>
                  <ul>
                    <ul>
                      <li>User Defined Functions</li>
                      <li>Object Orientation</li>
                      <li>National Characters - Unicode</li>
                      <li>Multiple Currency Symbols</li>
                      <li>Cultural Adaptability (Locales)</li>
                      <li>Dynamic Memory Allocation (pointers)</li>
                      <li>Data Validation Using New VALIDATE Verb</li>
                      <li>Binary and Floating Point Data Types</li>
                      <li>User Defined Data Types</li>
                    </ul>
                  </ul>
                </ul>
                <p>
                  <b>COBOL is non-proprietary (portable)</b><br />
                  The COBOL standard does not belong to any particular vendor.
                  The vendor independent ANSI COBOL committee legislates formal,
                  non-vendor-specific syntax and semantic language standards.
                  COBOL has been ported to virtually every hardware platform -
                  from every favour of Windows, to every falser of Unix, to
                  AS/400, VSE, OS/2, DOS, VMS, Unisys, DG, VM, and MVS.
                </p>
                <p>
                  <br />
                  <b>COBOL is Maintainable<br /> </b>COBOL has a 30 year proven
                  track record for application maintenance, enhancement and
                  production support at the enterprise level. Early indications
                  from the year 2000 problem are that COBOL applications were
                  actually cheaper to fix than applications written in more
                  recent languages. [<font size="-1">
                    <a href="#capers">Capers Jones</a></font
                  >] [<font size="-1"><a href="#kapple">Kappleman</a></font
                  >]
                </p>
                <p>
                  One reason for the maintainability of COBOL programs has been
                  given above - the readability of COBOL code. Another reason is
                  COBOL's rigid hierarchical structure. In COBOL programs all
                  external references, such as to devices, files, command
                  sequences, collating sequences, the currency symbol and the
                  decimal point symbol, are defined in the Environment Division.
                </p>
                <p>
                  When a COBOL program is moved to a new machine, or has new
                  peripheral devices attached, or is required to work in a
                  different country; COBOL programmers know that the parts of
                  the program that will have to be altered to accommodate these
                  changes will be isolated in the Environment Division. In other
                  programming languages, programmer discipline could have
                  ensured that the references liable to change were restricted
                  to one part of the program but they could just as easily be
                  spread throughout the program. In COBOL programs, programmers
                  have no choice. COBOL's rigid hierarchical structure ensures
                  that these items are restricted to the Environment
                  Division.<br />
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="1130"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >References and further reading</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="1130">
                <p>
                  In this semi-formal document I have not been fastidious in
                  referencing all the souces I have used. Because of that I
                  would like to acknowledge that most of factual material and
                  some of the commentary was gleaned from the following sources.
                  These may also serve as further reading.
                </p>
                <p>
                  Most of this material is available on the web but as the web
                  is dynamic and links are all to easily broken I won't give the
                  URL's here. You will have to search for them.
                </p>
                <h3 align="center">Resources</h3>
                <p>
                  Ankrum,T. Scott - COBOL -- A Best Practice (Sept, 2001)-
                  COBOLReport.com
                </p>
                <p>
                  Arranga,Edmund C. - The Viagrazation of COBOL -
                  COBOLwebler.com
                </p>
                <p>
                  Arranga, Edmund C. &amp; Price, Wilson - Fresh from Y2K,
                  What's next for COBOL? (March/April 2000) - IEEE Software
                </p>
                <p>
                  <a name="arranga"></a>Arranga et al - In COBOL's Defense :
                  Roundtable Discussion (March/April 2000) - IEEE Software
                </p>
                <p>
                  Badower, Justin - COBOL: Foundation of the future -
                  COBOLwebler.com
                </p>
                <p>
                  <a name="brown"></a>Brown, Gary DeWard - COBOL: The failure
                  that wasn't - COBOLReport.com
                </p>
                <p>
                  Burger,Thomas Wolfgang - COBOL in an open source future (May
                  2000) - IBM developerWorks : Linux : Linux articles
                </p>
                <p>
                  Carr, Donald &amp; Kizior, Ronald J. - The Case for Continued
                  COBOL Education (March/April 2000) - IEEE Software
                </p>
                <p>
                  Feiman, J. - The Gartner Programming Language Survey (October
                  2001) - Gartner Advisory
                </p>
                <p>
                  Glass, Robert L. - Cobol - A Contradiction and an Enigma -
                  COMMUNICATIONS OF THE ACM September 1997/Vol. 40, No. 9
                </p>
                <p>
                  <a name="capers"></a>Jones, Capers - The global economic
                  impact of the year 2000 software problem (Jan, 1997)
                </p>
                <p>
                  <a name="kapple"></a>Kappelman, Leon A. - Some Strategic Y2K
                  Blessings (March/April 2000) - IEEE Software
                </p>
                <p>
                  Kizior, Dr. Ronald J. &amp; Carr, Donald &amp; Halpern, Dr.
                  Paul - What Professionals think of the Future of COBOL?
                </p>
                <p>
                  Murach, Mike - Is COBOL Dying ... or Thriving? (February 2001)
                  - The Cobol Newswire
                </p>
                <p>
                  Pagnan, Martin - Can A Java Programmer Be Transitioned To
                  Cobol? (Feb, 2002) - COBOLReport.com
                </p>
                <p>
                  Reimann, Artur -COBOL, Language of Choice - Then and Now
                  (January, 2001) - COBOLReport.com
                </p>
                <p>
                  Sayles, Jonathan - COBOL and the Enterprise Business
                  Application Programming Legacy - MicroFocus Ltd.
                </p>
                <p>
                  Silverberg, Fred, COBOL and the Business Programming Paradigm
                  (1996)
                </p>
                <p>Sneed, Harry M.- The Evolution of COBOL - COBOLReport.com</p>
                <p>
                  Wilkinson,Stephanie - From the Dustbin, Cobol Rises (May,
                  2001)- eWeek
                </p>
                <p>&nbsp;</p>
              </td>
            </tr>
            <tr>
              <td valign="top" align="left" bgcolor="#FFFFFF" colspan="2">
                <div align="center">
                  <hr width="100%" />
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" align="LEFT" bgcolor="#993300" colspan="2">
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="part2"></a
                    ><font face="Arial, Helvetica, sans-serif"
                      >Introduction to Programming
                    </font></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="131"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Introduction</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="131">
                <p align="left">
                  In this section a gentle introduction to programing in
                  general, and to programming in COBOL in particular, is
                  provided. This is done by writing some simple COBOL programs
                  that use the three main programming constructs - Sequence,
                  Iteration and Selection.
                </p>
                <p align="left">
                  Don't worry if you don't understand these programs at this
                  point. The main purpose of this section is to give you a first
                  look at some simple COBOL programs.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="338"
              >
                <font color="#800000" face="Arial, Helvetica, sans-serif"
                  ><b> Let's write a program</b></font
                >
              </td>
              <td width="525" valign="top" height="338">
                <p align="left">
                  A program is a collection of statements written in a language
                  the computer understands.<br />
                </p>
                <p align="left">
                  A computer executes program statements one after another in
                  sequence until it reaches the end of the program unless some
                  statement in the program alters the order of execution.
                </p>
                <p align="left">
                  Computer Scientists have shown that any program can be written
                  using the three main programming constructs;
                </p>
                <table width="100%" border="0" cellspacing="1" cellpadding="1">
                  <tr>
                    <td width="125">&nbsp;</td>
                    <td>
                      <font size="+2" face="Arial, Helvetica, sans-serif"
                        ><b
                          ><font size="+1" color="#000099"
                            ><img
                              src="Resources/pics/BallRedG.gif"
                              width="13"
                              height="13"
                              hspace="10"
                            />Sequence</font
                          ></b
                        ></font
                      ><font
                        size="+1"
                        color="#000099"
                        face="Arial, Helvetica, sans-serif"
                        ><b
                          ><br />
                          <font size="+2"
                            ><b
                              ><img
                                src="Resources/pics/BallRedG.gif"
                                width="13"
                                height="13"
                                hspace="10" /></b></font
                          >Selection<br />
                          <font size="+2"
                            ><b
                              ><img
                                src="Resources/pics/BallRedG.gif"
                                width="13"
                                height="13"
                                hspace="10" /></b></font
                          >Iteration</b
                        ></font
                      >
                    </td>
                  </tr>
                </table>
                <p align="left">
                  This section introduces COBOL programming by writing some
                  simple COBOL programs using these constructs.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="210"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    ><b>Sequence Program Specification</b></font
                  >
                </h4>
                <h4>&nbsp;</h4>
                <h4 align="center"><font size="-1"> </font></h4>
              </td>
              <td width="525" valign="top" height="210">
                <p align="left">
                  We want to write a program which will accept two numbers from
                  the users keyboard, multiply them together and display the
                  result on the computer screen.<br />
                </p>
                <p align="left">Any program consists of three main things;</p>
                <ol>
                  <li>The computer statements needed to do the job</li>
                  <li>
                    Declarations for the data items that the computer statements
                    need.
                  </li>
                  <li>
                    A plan, or algorithm, that arranges the computer statements
                    in the program so that the computer executes them in the
                    correct order.
                  </li>
                </ol>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="398"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Program Statements and Data items
                  </font>
                </h4>
              </td>
              <td width="525" valign="top" height="398">
                <p align="left">
                  What COBOL program statements will we need to do the job
                  specified above and what data items will we need to access?<br />
                </p>
                <blockquote>
                  <p>
                    We will need a statement to take in the first number and
                    store it in the named memory location (a variable) - Num1<b
                      ><font face="Courier New, Courier, mono" size="+1"
                        ><br /> </font
                      ><font size="+1"
                        ><b
                          ><font face="Courier New, Courier, mono" size="+1"
                            >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font
                          ><font
                            face="Courier New, Courier, mono"
                          ></font></b></font
                      ><font face="Courier New, Courier, mono" size="+1"
                        >ACCEPT Num1.</font
                      ></b
                    >
                  </p>
                </blockquote>
                <blockquote>
                  <p>
                    We will need a statement to take in the second number and
                    store it in the named memory location - Num2<b
                      ><font size="+1" face="Courier New, Courier, mono"
                        ><br /> </font
                      ><font size="+1"
                        ><b
                          ><font face="Courier New, Courier, mono" size="+1"
                            >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font
                          ><font
                            face="Courier New, Courier, mono"
                          ></font></b></font
                      ><font size="+1" face="Courier New, Courier, mono"
                        >ACCEPT Num2.</font
                      ></b
                    >
                  </p>
                </blockquote>
                <blockquote>
                  <p>
                    We will need a statement to multiply the two numbers
                    together and to store the result in the named location -
                    Result<font size="+1"
                      ><b
                        ><br />
                        <font face="Courier New, Courier, mono" size="+1"
                          >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font
                        ><font face="Courier New, Courier, mono"
                          >MULTIPLY Num1 BY Num2 GIVING Result.</font
                        ></b
                      ></font
                    >
                  </p>
                  <p>
                    We will need a statement to display the value in the named
                    memory location &quot;<b>Result</b>&quot; on the computer
                    screen -<br />
                    <b
                      ><font size="+1"
                        ><b
                          ><font face="Courier New, Courier, mono" size="+1"
                            >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font
                          ></b
                        ><font face="Courier New, Courier, mono"
                          >DISPLAY &quot;Result is = &quot;, Result.</font
                        ></font
                      ></b
                    >
                  </p>
                </blockquote>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="376"
              >
                <b
                  ><font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Getting the Algorithm right</font
                  ></b
                >
              </td>
              <td width="525" valign="top" height="376">
                <p>
                  Now all we need to do to have a working program is to declare
                  the items needed to store the data and to place the statements
                  shown above in the correct order.
                </p>

                <p>
                  Click on these animations to see our attempts to write a
                  program that produces the correct answer. These attempts
                  illustrate importance of arranging the statements in a program
                  so that they are executed in the correct order.
                </p>

                <p>&nbsp;</p>
                <table
                  width="80%"
                  border="1"
                  cellspacing="1"
                  cellpadding="1"
                  align="center"
                >
                  <tr>
                    <td>
                      <p></p>
                      <p align="center">
                        Attempt 1<br />
                        <a href="Resources/ppz/TC-CobIntro1.htm"
                          ><img
                            src="Resources/pics/i-Animation.gif"
                            width="62"
                            height="62"
                            align="middle"
                            border="0"
                        /></a>
                      </p>
                    </td>

                    <td>
                      <p></p>
                      <p align="center">
                        Attempt 2<br />
                        <a href="Resources/ppz/TC-CobIntro2.htm"
                          ><img
                            src="Resources/pics/i-Animation.gif"
                            width="62"
                            height="62"
                            align="middle"
                            border="0"
                        /></a>
                      </p>
                    </td>

                    <td>
                      <p></p>
                      <p align="center">
                        Attempt 3<br />
                        <a href="Resources/ppz/TC-CobIntro3.htm"
                          ><img
                            src="Resources/pics/i-Animation.gif"
                            width="62"
                            height="62"
                            align="middle"
                            border="0"
                        /></a>
                      </p>
                    </td>
                  </tr>
                </table>
                <p>
                  Because this program is short, simple and easy to understand,
                  you may think that programming mistakes like these could never
                  happen. But don't be deceived - when writing a larger program
                  it is all to easy to make the mistake of trying to use, or
                  output, the contents of a data item before you have assigned
                  it a value.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="161"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    ><b>An annotated look at the COBOL program</b></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="161">
                <p>
                  Click on the animation below for an annotated version of the
                  program. Click anywhere in the animation to see the first and
                  subsequent annotations.
                </p>
                <p align="center">
                  Annotated Program<br />
                  <a href="Resources/ppz/TC-CobIntro4.htm"
                    ><img
                      src="Resources/pics/i-Animation.gif"
                      width="62"
                      height="62"
                      align="middle"
                      border="0"
                  /></a>
                </p>

                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="233"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Selection Program Specification</font
                  >
                </h4>
                <p align="center">
                  <img
                    src="Resources/pics/i-Detail.gif"
                    width="30"
                    height="37"
                  /><br />
                  <font size="-1"
                    >Note that these example programs are not meant to be
                    realistic. For instance, at the very least, a program
                    operating in the real world would have to ensure that the
                    input data was validated before it was used.</font
                  >
                </p>
              </td>
              <td width="525" valign="top" height="233">
                <p>
                  Write a program that accepts two numbers and an operator from
                  the user and then performs the appropriate calculation for
                  that operator. The operator must be either the addition (+) or
                  the multiplication (*) operator.
                </p>
                <p>
                  In this example run it is assumed that the user enters an
                  addition sign (+) as the operator
                </p>
                <p align="center">
                  Selection Program<br />
                  <a href="Resources/ppz/TC-CobIntro5.htm"
                    ><img
                      src="Resources/pics/i-Animation.gif"
                      width="62"
                      height="62"
                      align="middle"
                      border="0"
                  /></a>
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="151"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Iteration Program Specification</font
                  >
                </h4>
                <p align="center">&nbsp;</p>
              </td>
              <td width="525" valign="top" height="151">
                <p>
                  Write a program that accepts two numbers and an operator from
                  the user and then performs the appropriate calculation for
                  that operator. The operator must be either the addition (+) or
                  the multiplication (*) operator.
                </p>
                <p>
                  This is only a partial example run. It follows the flow of
                  control through the program for only one and a half
                  iterations.
                </p>
                <p align="center">
                  Iteration Program<br />
                  <a href="Resources/ppz/TC-CobIntro6.htm"
                    ><img
                      src="Resources/pics/i-Animation.gif"
                      width="62"
                      height="62"
                      align="middle"
                      border="0"
                  /></a>
                </p>
                <p>&nbsp;</p>
              </td>
            </tr>
            <tr>
              <td valign="top" align="left" bgcolor="#FFFFFF" colspan="2">
                <div align="center">
                  <hr width="100%" />
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" align="LEFT" bgcolor="#993300" colspan="2">
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="part3"></a
                    ><font face="Arial, Helvetica, sans-serif"
                      >COBOL basics
                    </font></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="119"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Introduction</font
                  >
                </h4>
                <h4>&nbsp;</h4>
              </td>
              <td width="525" valign="top" height="119">
                <p>
                  This section presents the fundamentals of constructing COBOL
                  programs. It explains the notation used in COBOL syntax
                  diagrams and enumerates the COBOL coding rules. It shows how
                  user-defined names are constructed and examines the structure
                  of COBOL programs. <br />
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="406"
              >
                <h4 align="left">
                  <b
                    ><font color="#800000" face="Arial, Helvetica, sans-serif"
                      >COBOL idiosyncrasies</font
                    >
                  </b>
                </h4>
              </td>
              <td width="525" valign="top" height="406">
                <p>
                  COBOL is one of the oldest programming languages in use. As a
                  result it has some idiosyncrasies which programmers used to
                  other languages may find irritating.
                </p>
                <p>
                  When COBOL was developed (around the end of the 1950's) one of
                  the design goals was to make it as English-like as possible.
                  As a result, COBOL uses structural concepts normally
                  associated with English prose such as section, paragraph and
                  sentence. It also has an extensive reserved word list with
                  over 300 entries and the reserved words themselves, tend to be
                  long. COBOL programs tend to be verbose especially when
                  compared to languages like C.
                </p>
                <p>
                  When COBOL was designed, programs were written on coding forms
                  (see below) , punched on to punch cards, and loaded into the
                  computer using a punch card reader. These media (coding forms
                  and punch cards) required adherence to a number formatting
                  restrictions that some COBOL implementations still enforce
                  today, long after the need for them has gone.
                </p>
                <p>
                  Although modern COBOL (COBOL 85 and OO-COBOL) has introduced
                  many of the constructs required to write well structured
                  programs it also still retains elements which, if used, make
                  it difficult, and in some cases impossible, to write good
                  programs.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="404"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >COBOL syntax
                  </font>
                </h4>
              </td>
              <td width="525" valign="top" height="404">
                <p>
                  COBOL syntax is defined using particular notation sometimes
                  called the COBOL MetaLanguage.
                </p>
                <p>
                  In this notation, words in uppercase are reserved words. When
                  underlined they are mandatory. When not underlined they are
                  &quot;noise&quot; words, used for readability only, and are
                  optional. Because COBOL statements are supposed to read like
                  English sentences there are a lot of these &quot;noise&quot;
                  words.
                </p>
                <p>
                  Words in mixed case represent names that must be devised by
                  the programmer (like data item names).
                </p>
                <p>
                  When material is enclosed in curly braces <b>{ }</b>, a choice
                  must be made from the options within the braces. If there is
                  only one option then that item in mandatory.
                </p>
                <p>
                  Material enclosed in square brackets <b>[ ]</b>, indicates
                  that the material is optional, and may be included or omitted
                  as required.
                </p>
                <p>
                  The ellipsis symbol <b>...</b> (three dots), indicates that
                  the preceding syntax element may be repeated at the
                  programmer's discretion.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="273"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Some notes on syntax diagrams</font
                  >
                </h4>
                <h4>&nbsp;</h4>
              </td>
              <td width="525" valign="top" height="273">
                <p>
                  To simplify the syntax diagrams and reduce the number of rules
                  that must be explained, in some diagrams special operand
                  endings have been used (note that this is my own extension -
                  it is not standard COBOL). <br />
                </p>
                <p>
                  These special operand endings have the following meanings:
                </p>
                <blockquote>
                  <table
                    width="100%"
                    border="1"
                    cellspacing="1"
                    cellpadding="5"
                  >
                    <tr>
                      <td>
                        <b
                          ><font face="Arial, Helvetica, sans-serif"
                            >$i
                          </font></b
                        >
                      </td>
                      <td>
                        <font face="Arial, Helvetica, sans-serif"
                          >uses an alphanumeric data-item</font
                        ><b
                          ><font face="Arial, Helvetica, sans-serif"></font
                        ></b>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <b
                          ><font face="Arial, Helvetica, sans-serif"
                            >$il</font
                          ></b
                        >
                      </td>
                      <td>
                        <font face="Arial, Helvetica, sans-serif"
                          >uses an alphanumeric data-item or a string
                          literal</font
                        ><b
                          ><font face="Arial, Helvetica, sans-serif"></font
                        ></b>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <b
                          ><font face="Arial, Helvetica, sans-serif"
                            >#i</font
                          ></b
                        >
                      </td>
                      <td>
                        <font face="Arial, Helvetica, sans-serif"
                          >uses a numeric data-item</font
                        ><b
                          ><font face="Arial, Helvetica, sans-serif"></font
                        ></b>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <b
                          ><font face="Arial, Helvetica, sans-serif"
                            >#il
                          </font></b
                        ><font face="Arial, Helvetica, sans-serif"></font>
                      </td>
                      <td>
                        <font face="Arial, Helvetica, sans-serif"
                          >uses a numeric data-item or numeric literal </font
                        ><b
                          ><font face="Arial, Helvetica, sans-serif"></font
                        ></b>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <b
                          ><font face="Arial, Helvetica, sans-serif"
                            >$#i</font
                          ></b
                        >
                      </td>
                      <td>
                        <font face="Arial, Helvetica, sans-serif"
                          >uses a numeric or an alphanumeric data-item</font
                        >
                      </td>
                    </tr>
                  </table>
                  <p>&nbsp;</p>
                </blockquote>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="663"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >An example syntax diagram</font
                  >
                </h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <h4>&nbsp;</h4>
                <div align="center">
                  <img
                    src="Resources/pics/i-Detail.gif"
                    width="30"
                    height="37"
                  /><br />
                  <font size="-1"
                    >Note that for clarity data items may be separated from one
                    another by means of an optional comma. <br />
                    This has been done in the COMPUTE statement opposite</font
                  >
                </div>
                <h4>&nbsp;</h4>
                <h4 align="center">&nbsp;</h4>
              </td>
              <td width="525" valign="top" height="663">
                <p>
                  In COBOL, evaluating an arithmetic expression and assigning
                  the result to a data item is achieved by means of the COMPUTE
                  statement. The syntax diagram for the COMPUTE is shown below.
                </p>
                <p align="center">
                  <img
                    src="Resources/pics/Compute.gif"
                    width="509"
                    height="77"
                  />
                </p>
                <p>This syntax diagram may be interpreted as follows;</p>
                <p>
                  We must start a <font size="-1">COMPUTE</font> statement with
                  the keyword <font size="-1">COMPUTE</font>.
                </p>
                <p>
                  We must follow the keyword with the name(s) of the numeric
                  data item (or items - note the ellipsis symbol (...)) to be
                  used to receive the result of the expression. The #i suffix at
                  the end of word <b>Result</b> tells us that a numeric
                  identifier/data item must be used.
                </p>
                <p align="left">
                  Since the ellipsis symbol is placed outside the curly brackets
                  we can interpret this to mean that each result field can have
                  its own <font size="-1">ROUNDED</font> phase. In other words
                  we could have a <font size="-1">COMPUTE</font> statement like
                  -<br />
                  <br />
                  <b
                    ><font face="Courier New, Courier, mono"
                      >COMPUTE Result1 ROUNDED, Result2 = ((9*9)+8)/5</font
                    ></b
                  >
                </p>
                <p align="left">
                  where Result1 would be assigned a value of 18 and Result2
                  would be assigned a value of 17.8.
                </p>
                <p align="left">
                  The square brackets after the Arithmetic Expression indicate
                  that the next items are optional but if used we must choose
                  between the <font size="-1">ON SIZE ERROR</font> or
                  <font size="-1">NOT ON SIZE ERROR</font> phrases.
                </p>
                <p align="left">
                  Because the <font size="-1">END-COMPUTE</font> is contained
                  within the square brackets it must only be used when a
                  <font size="-1">SIZE ERROR</font> or
                  <font size="-1">NOT SIZE ERROR</font> phrase is used.
                </p>
                <hr width="100%" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="907"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    ><b>COBOL coding rules</b></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="907">
                <p>
                  Traditionally, COBOL programs were written on coding forms and
                  then punched on to punch cards. Although nowadays most
                  programs are entered directly into a computer, some COBOL
                  formatting conventions remain that derive from its ancient
                  punch-card history.
                </p>
                <p>
                  On coding forms, the first six character positions are
                  reserved for sequence numbers. The seventh character position
                  is reserved for the continuation character, or for an asterisk
                  that denotes a comment line.
                </p>
                <p>
                  The actual program text starts in column 8. The four positions
                  from 8 to 11 are known as Area A, and positions from 12 to 72
                  are Area B.<br />
                </p>
                <p>
                  Although many COBOL compilers ignore some of these formatting
                  restrictions, most still retain the distinction between Area A
                  and Area B.
                </p>
                <p>
                  When a COBOL compiler recognizes the two areas, all division
                  names, section names, paragraph names, FD entries and 01 level
                  numbers must start in Area A. All other sentences must start
                  in Area B.
                </p>
                <p>
                  In our example programs we use the compiler directive
                  (available with the NetExpress COBOL compiler) -
                  <font size="-1">$ SET SOURCEFORMAT&quot;FREE&quot;</font> - to
                  free us from these formatting restrictions.<br />
                </p>
                <p align="center">
                  <b>Ancient COBOL coding form</b
                  ><img
                    src="Resources/pics/CodingForm.jpg"
                    width="498"
                    height="415"
                    border="1"
                  />
                </p>
                <hr width="100%" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="238"
              >
                <h4>
                  <b
                    ><font color="#800000" face="Arial, Helvetica, sans-serif"
                      >Name construction</font
                    ></b
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="238">
                <p>
                  All user-defined names, such as data names, paragraph names,
                  section names condition names and mnemonic names, must adhere
                  to the following rules:
                </p>
                <ol>
                  <li>
                    They must contain at least one character, but not more than
                    30 characters.
                  </li>
                  <li>They must contain at least one alphabetic character.</li>
                  <li>They must not begin or end with a hyphen.</li>
                  <li>
                    They must be constructed from the characters A to Z, the
                    numbers 0 to 9, and the hyphen.
                  </li>
                  <li>They must not contain spaces.</li>
                  <li>
                    Names are not case-sensitive: TotalPay is the same as
                    totalpay, Totalpay or <font size="-1">TOTALPAY</font>.<br />
                  </li>
                </ol>
                <hr width="100%" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="502"
              >
                <h4>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    >The structure of COBOL programs</font
                  >
                </h4>
                <h4 align="center">&nbsp;</h4>
                <h4 align="center">&nbsp;</h4>
                <h4 align="center">&nbsp;</h4>
                <h4 align="center">&nbsp;</h4>
                <h4 align="center">&nbsp;</h4>
              </td>
              <td width="525" valign="top" height="502">
                <p>
                  COBOL programs are hierarchical in structure. Each element of
                  the hierarchy consists of one or more subordinate elements.
                </p>
                <p>
                  The hierarchy consists of Divisions, Sections, Paragraphs,
                  Sentences and Statements.
                </p>
                <p>
                  A Division may contain one or more Sections, a Section one or
                  more Paragraphs, a Paragraph one or more Sentences and a
                  Sentence one or more Statements.
                </p>
                <p>
                  We can represent the COBOL hierarchy using the COBOL
                  metalanguage as follows;
                </p>
                <p>&nbsp;</p>
                <p align="center">
                  <img
                    src="Resources/pics/CobolStructure.gif"
                    width="467"
                    height="203"
                  /><br />
                </p>
                <p align="center">&nbsp;</p>
                <p align="left">
                  <b
                    ><font face="Arial, Helvetica, sans-serif"
                      >Divisions</font
                    ></b
                  ><br />
                  A division is a block of code, usually containing one or more
                  sections, that starts where the division name is encountered
                  and ends with the beginning of the next division or with the
                  end of the program text.
                </p>
                <p align="left">
                  <br />
                  <b
                    ><font face="Arial, Helvetica, sans-serif"
                      >Sections</font
                    ></b
                  ><br />
                  A section is a block of code usually containing one or more
                  paragraphs. A section begins with the section name and ends
                  where the next section name is encountered or where the
                  program text ends.
                </p>
                <p align="left">
                  Section names are devised by the programmer, or defined by the
                  language. A section name is followed by the word
                  <font size="-1">SECTION</font> and a period. <br />
                  See the two example names below -
                </p>
                <blockquote>
                  <p>
                    <b
                      ><font face="Courier New, Courier, mono"
                        >SelectUnpaidBills SECTION.<br /> </font></b
                    ><font face="Courier New, Courier, mono"
                      ><b>FILE SECTION.</b></font
                    >
                  </p>
                  <p>&nbsp;</p>
                </blockquote>
                <p>
                  <font face="Arial, Helvetica, sans-serif"
                    ><b>Paragraphs</b></font
                  ><br />
                  A paragraph is a block of code made up of one or more
                  sentences. A paragraph begins with the paragraph name and ends
                  with the next paragraph or section name or the end of the
                  program text.
                </p>
                <p>
                  A paragraph name is devised by the programmer or defined by
                  the language, and is followed by a period. <br />
                  See the two example names below -
                </p>
                <blockquote>
                  <p>
                    <font face="Courier New, Courier, mono"
                      ><b>PrintFinalTotals.<br /> </b></font
                    ><font face="Courier New, Courier, mono"
                      ><b>PROGRAM-ID.</b></font
                    ><br />
                  </p>
                  <p>&nbsp;</p>
                </blockquote>
                <p>
                  <font face="Arial, Helvetica, sans-serif"
                    ><b>Sentences and statements</b></font
                  ><br />
                  A sentence consists of one or more statements and is
                  terminated by a period.<br />
                  For example:
                </p>
                <blockquote>
                  <p>
                    <b
                      ><font face="Courier New, Courier, mono"
                        >MOVE .21 TO VatRate<br />
                        &nbsp;&nbsp;&nbsp;MOVE 1235.76 TO ProductCost<br />
                        &nbsp;&nbsp;&nbsp;COMPUTE VatAmount = ProductCost *
                        VatRate.</font
                      ></b
                    >
                  </p>
                </blockquote>
                <p>
                  <br />
                  A statement consists of a COBOL verb and an operand or
                  operands.
                  <br />
                  For example:
                </p>
                <blockquote>
                  <p>
                    <b
                      ><font face="Courier New, Courier, mono"
                        >SUBTRACT Tax FROM GrossPay GIVING NetPay</font
                      ></b
                    ><br />
                  </p>
                </blockquote>
                <p align="left">&nbsp;</p>
              </td>
            </tr>
            <tr>
              <td valign="top" align="left" bgcolor="#FFFFFF" colspan="2">
                <div align="center">
                  <hr width="100%" />
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" align="LEFT" bgcolor="#993300" colspan="2">
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="part4"></a
                    ><font face="Arial, Helvetica, sans-serif"
                      >The Four Divisions</font
                    ></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="374"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Introduction</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="374">
                <p>
                  At the top of the COBOL hierarchy are the four divisions.
                  These divide the program into distinct structural elements.
                  Although some of the divisions may be omitted, the sequence in
                  which they are specified is fixed, and must follow the order
                  below.
                </p>
                <blockquote>
                  <blockquote>
                    <blockquote>
                      <p align="center">
                        <br />
                        <b
                          ><font face="Arial, Helvetica, sans-serif" size="+1"
                            >IDENTIFICATION DIVISION.</font
                          ></b
                        ><br />
                        Contains program information
                      </p>
                      <p align="center">
                        <font face="Arial, Helvetica, sans-serif"
                          ><b
                            ><font size="+1">ENVIRONMENT DIVISION.</font></b
                          ></font
                        ><br />
                        Contains environment information
                      </p>
                      <p align="center">
                        <font face="Arial, Helvetica, sans-serif"
                          ><b><font size="+1">DATA DIVISION.</font></b></font
                        ><br />
                        Contains data descriptions
                      </p>
                      <p align="center">
                        <b
                          ><font face="Arial, Helvetica, sans-serif" size="+1"
                            >PROCEDURE DIVISION.</font
                          ></b
                        ><br />
                        Contains the program algorithms<br />
                      </p>
                    </blockquote>
                  </blockquote>
                </blockquote>
                <div align="center"></div>
                <hr width="100%" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="710"
              >
                <h4 align="left">
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    >The IDENTIFICATION DIVISION</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="710">
                <p>
                  The <font size="-1">IDENTIFICATION DIVISION</font> supplies
                  information about the program to the programmer and the
                  compiler.
                </p>
                <p>
                  Most entries in the
                  <font size="-1">IDENTIFICATION DIVISION </font>are directed at
                  the programmer. The compiler treats them as comments.
                </p>
                <p>
                  The <font size="-1">PROGRAM-ID</font> clause is an exception
                  to this rule. Every COBOL program must have a
                  <font size="-1">PROGRAM-ID</font>
                  because the name specified after this clause is used by the
                  linker when linking a number of subprograms into one run unit,
                  and by the
                  <font size="-1">CALL</font> statement when transferring
                  control to a subprogram.
                </p>
                <p>
                  The <font size="-1">IDENTIFICATION DIVISION </font>has the
                  following structure:
                </p>
                <blockquote>
                  <p>
                    <font face="Courier New, Courier, mono"
                      ><b
                        >IDENTIFICATION DIVISION<br />
                        PROGRAM-ID. NameOfProgram.<br />
                        [AUTHOR. YourName.]<br />
                        other entries here</b
                      ></font
                    >
                  </p>
                </blockquote>
                <p>
                  The keywords -
                  <font size="-1">IDENTIFICATION DIVISION</font> - represent the
                  division header, and signal the commencement of the program
                  text.
                </p>
                <p>
                  <font size="-1">PROGRAM-ID</font> is a paragraph name that
                  must be specified immediately after the division header.
                </p>
                <p>
                  NameOfProgram is a name devised by the programmer, and must
                  satisfy the rules for user-defined names.
                </p>
                <p>Here's a typical program fragment:</p>
                <table
                  width="374"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td>
                      <pre><B><FONT face="Courier New, Courier, mono">IDENTIFICATION DIVISION.<BR>PROGRAM-ID. SequenceProgram.<BR>AUTHOR. Michael Coughlan.</FONT></B></pre>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="288"
              >
                <h4 align="left">
                  <font color="#800000"
                    ><b
                      ><font face="Arial, Helvetica, sans-serif"
                        >The ENVIRONMENT DIVISION</font
                      ></b
                    ></font
                  >
                </h4>
                <h4>&nbsp;</h4>
              </td>
              <td width="525" valign="top" height="288">
                <p>
                  The <font size="-1">ENVIRONMENT DIVISION</font> is used to
                  describe the environment in which the program will run.
                </p>
                <p>
                  The purpose of the
                  <font size="-1">ENVIRONMENT DIVISION</font> is to isolate in
                  one place all aspects of the program that are dependant upon a
                  specific computer, device or encoding sequence.
                </p>
                <p>
                  The idea behind this is to make it easy to change the program
                  when it has to run on a different computer or one with
                  different peripheral devices.
                </p>
                <p>
                  In the <font size="-1">ENVIRONMENT DIVISION</font>, aliases
                  are assigned to external devices, files or command sequences.
                  Other environment details, such as the collating sequence, the
                  currency symbol and the decimal point symbol may also be
                  defined here.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="825"
              >
                <div align="left">
                  <font color="#800000"
                    ><b
                      ><font face="Arial, Helvetica, sans-serif"
                        >The DATA DIVISION</font
                      ></b
                    ></font
                  >
                </div>
              </td>
              <td width="525" valign="top" height="825">
                <p>
                  As the name suggests, the <font size="-1">DATA DIVISION</font>
                  provides descriptions of the data-items processed by the
                  program.
                </p>
                <p>
                  The <font size="-1">DATA DIVISION</font> has two main
                  sections: the <font size="-1">FILE SECTION</font> and the
                  <font size="-1">WORKING-STORAGE SECTION</font>. Additional
                  sections, such as the
                  <font size="-1">LINKAGE SECTION</font> (used in subprograms)
                  and the <font size="-1">REPORT SECTION</font> (used in Report
                  Writer based programs) may also be required.
                </p>
                <p>
                  The <font size="-1">FILE SECTION</font> is used to describe
                  most of the data that is sent to, or comes from, the
                  computer's peripherals.
                </p>
                <p>
                  The <font size="-1">WORKING-STORAGE SECTION</font> is used to
                  describe the general variables used in the program.
                </p>
                <p align="left">
                  <br />
                  The <font size="-1">DATA DIVISION</font> has the following
                  structure and syntax:
                </p>
                <p align="center">
                  <img
                    src="/cobol/course/Resources/pics/DataDiv.gif"
                    width="332"
                    height="161"
                  />
                </p>
                <p align="left">
                  <br />
                  Below is a sample program fragment -
                </p>
                <table
                  width="406"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td>
                      <pre><FONT face="Courier New, Courier, mono">IDENTIFICATION DIVISION.<BR>PROGRAM-ID. SequenceProgram.<BR>AUTHOR. Michael Coughlan.</FONT><B><FONT face="Courier New, Courier, mono">
<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01  Num1           PIC 9  VALUE ZEROS.<BR>01  Num2           PIC 9  VALUE ZEROS.<BR>01  Result         PIC 99 VALUE ZEROS.<BR></FONT></B></pre>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="69"
              >
                <h4 align="left">
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >The PROCEDURE DIVISION</font
                  >
                </h4>
                <h4>&nbsp;</h4>
              </td>
              <td width="525" valign="top" height="69">
                <p>
                  The <font size="-1">PROCEDURE DIVISION</font> contains the
                  code used to manipulate the data described in the
                  <font size="-1">DATA DIVISION</font>. It is here that the
                  programmer describes his algorithm.
                </p>
                <p>
                  The <font size="-1">PROCEDURE DIVISION</font> is hierarchical
                  in structure and consists of sections, paragraphs, sentences
                  and statements.
                </p>
                <p>
                  Only the section is optional. There must be at least one
                  paragraph, sentence and statement in the
                  <font size="-1">PROCEDURE DIVISION</font>.
                </p>
                <p>
                  Paragraph and section names in the
                  <font size="-1">PROCEDURE DIVISION</font> are chosen by the
                  programmer and must conform to the rules for user-defined
                  names.
                </p>
                <p align="center">
                  <br />
                  <b>Sample Program</b>
                </p>
                <table
                  width="390"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td>
                      <pre><FONT face="Courier New, Courier, mono">IDENTIFICATION DIVISION.
PROGRAM-ID. SequenceProgram.
AUTHOR. Michael Coughlan. </FONT>                    </PRE>
                      <pre><FONT face="Courier New, Courier, mono">DATA DIVISION.
WORKING-STORAGE SECTION.
01 Num1 PIC 9 VALUE ZEROS.
01 Num2 PIC 9 VALUE ZEROS.
01 Result PIC 99 VALUE ZEROS.</FONT></PRE>
                      <pre><B><FONT face="Courier New, Courier, mono">
PROCEDURE DIVISION.
CalculateResult.
   ACCEPT Num1.
   ACCEPT Num2.
   MULTIPLY Num1 BY Num2 GIVING Result.
   DISPLAY &quot;Result is = &quot;, Result.
   STOP RUN.</FONT></B>
                   </PRE>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <p>
                  Some COBOL compilers require that all the divisions be present
                  in a program while others only require the
                  <font size="-1">IDENTIFICATION DIVISION</font> and the
                  <font size="-1">PROCEDURE DIVISION</font>. For instance the
                  program shown below is perfectly valid when compiled with the
                  Microfocus NetExpress compiler.
                </p>
                <p align="center"><b>Minimum COBOL program</b></p>
                <table
                  width="390"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td height="130">
                      <pre><B>IDENTIFICATION DIVISION.<BR>PROGRAM-ID.  SmallestProgram.</B></PRE>
                      <pre><B>PROCEDURE DIVISION.
DisplayGreeting.
   DISPLAY &quot;Hello world&quot;.
   STOP RUN.</B>
                   </PRE>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <p align="left">&nbsp;</p>
              </td>
            </tr>
            <tr>
              <td align="left" bgcolor="#FFFFFF" colspan="2">
                <hr width="100%" />
                <div align="center">
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                  <hr />
                  <h3 align="center">Copyright Notice</h3>
                  <p align="center">
                    These COBOL course materials are the copyright property of
                    Michael Coughlan.
                  </p>
                  <p align="left">
                    <font size="2"
                      >All rights reserved. No part of these course materials
                      may be reproduced in any form or by any means - graphic,
                      electronic, mechanical, photocopying, printing, recording,
                      taping or stored in an information storage and retrieval
                      system - without the written permission of </font
                    ><font size="2">the author.</font>
                  </p>
                  <p align="center">
                    <font size="2">(c) Michael Coughlan</font>
                  </p>
                  <hr align="left" />
                  <div align="left">
                    <i><font size="-1">Last updated : April 2002</font></i>
                    <br />
                    <font size="-1"
                      ><a href="mailto:michael.coughlan@ul.ie"
                        >e-mail : CSISwebeditor@ul.ie</a
                      ></font
                    >
                  </div>
                </div>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>
  </body>
</html>
