<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <meta name="GENERATOR" content="Mozilla/4.0 [en] (WinNT; I) [Netscape]" />
    <title>Contained and external sub-programs</title>
  </head>
  <body
    text="#000000"
    bgcolor="#FFFFFF"
    link="#0000FF"
    vlink="#FF0000"
    alink="#009B00"
  >
    <table border="1" width="715" cellspacing="0">
      <tr>
        <td height="16235">
          <table width="710" cellpadding="4" cellspacing="0" border="0">
            <tr>
              <td
                valign="top"
                align="left"
                bgcolor="#FFFFFF"
                colspan="2"
                height="373"
              >
                <center>
                  <h2>
                    <img
                      src="Resources/pics/t-CobolTut.gif"
                      width="173"
                      height="59"
                    />
                  </h2>
                </center>
                <center>
                  <h2>Subprograms</h2>
                  <hr />
                </center>
                <table border="0" width="700" vspace="15">
                  <tr>
                    <td width="3%" valign="TOP" height="44">&nbsp;</td>
                    <td width="4%" valign="TOP" height="44">
                      <img
                        src="Resources/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" height="44">
                      <b><a href="#intro" target="">Introduction</a><br /> </b
                      ><font size="-1"
                        >Unit aims, objectives, prerequisites.</font
                      ><br />
                    </td>
                  </tr>
                  <tr>
                    <td width="3%" valign="TOP" height="58">&nbsp;</td>
                    <td width="4%" valign="TOP" height="58">
                      <img
                        src="Resources/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" valign="top" height="58">
                      <p>
                        <b
                          ><a href="#part1" target="">The CALL verb</a
                          ><br /> </b
                        ><font size="-1"
                          >Subprograms, the syntax and semantics of the CALL
                          verb and parameter passing mechanisms. State memory,
                          the IS INITIAL clause and the CANCEL command.</font
                        ><br />
                      </p>
                    </td>
                  </tr>
                  <tr>
                    <td width="3%" valign="TOP" height="46">&nbsp;</td>
                    <td width="4%" valign="TOP" height="46">
                      <img
                        src="Resources/pics/BallGreenG.gif"
                        hspace="4"
                        height="13"
                        width="13"
                        align="TOP"
                        vspace="4"
                      />
                    </td>
                    <td width="93%" valign="top" height="46">
                      <div align="left">
                        <p>
                          <b
                            ><a href="#part2" target="">Contained Subprograms</a
                            ><br /> </b
                          ><font size="-1">C</font
                          ><font size="-1"
                            >ontained subprogram defined. Sharing data with the
                            IS GLOBAL and IS EXTERNAL clause. Using the IS
                            COMMON PROGRAM clause. Measuring the quality of
                            subprograms.<br />
                          </font>
                        </p>
                      </div>
                    </td>
                  </tr>
                </table>
                <hr />
              </td>
            </tr>
            <tr>
              <td
                valign="top"
                align="LEFT"
                bgcolor="#993300"
                colspan="2"
                height="27"
              >
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="intro"></a
                    ><font face="Arial, Helvetica, sans-serif"
                      >Introduction</font
                    ></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td valign="top" width="175" bgcolor="#FFFFCC" height="218">
                <h4>
                  <font color="#993300" face="Arial, Helvetica, sans-serif"
                    >Aims</font
                  >
                </h4>
                <h4>
                  <img
                    src="Resources/pics/PanelLine.gif"
                    width="175"
                    height="1"
                  />
                </h4>
              </td>
              <td width="525" valign="top" height="218">
                <div align="center">
                  <p align="left">
                    To provide a brief introduction to building modular systems
                    using separately compiled and/or contained subprograms.
                  </p>
                  <p align="left">
                    To explore the syntax, semantics, and use of the
                    <font size="-1">CALL</font> verb.
                  </p>
                  <p align="left">
                    To examine how &quot;state memory&quot; is implemented in
                    COBOL and to demonstrate the effects of the
                    <font size="-1">IS INITIAL</font> clause and the
                    <font size="-1">CANCEL</font> command.
                  </p>
                  <p align="left">
                    To examine how contained subprograms are implemented and to
                    show how the <font size="-1">IS GLOBAL</font> clause may be
                    used to implement a form of &quot;Information Hiding&quot;.
                  </p>
                  <p align="left">
                    To show how the <font size="-1">IS EXTERNAL</font> clause
                    may be used to set up an area of storage that may be
                    accessed by any program in the run-unit.
                  </p>
                  <p align="left">
                    To introduce Structured Design and to summarize its criteria
                    for achieving good quality subprograms.
                  </p>
                  <hr width="100%" align="center" size="1" />
                </div>
              </td>
            </tr>
            <tr>
              <td
                valign="top"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="244"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Objectives</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="244">
                <p>By the end of this unit you should -</p>
                <ol>
                  <li>
                    Understand the difference between a subprogram and a
                    contained subprogram<br />
                    <br />
                  </li>
                  <li>
                    Be able to use the <font size="-1">CALL</font> verb to
                    transfer control to a subprogram and to pass parameter
                    values to it.<br />
                    <br />
                  </li>
                  <li>
                    Understand the difference between the
                    <font size="-1">BY REFERENCE</font> and
                    <font size="-1">BY CONTENT</font> parameter passing
                    mechanisms.<br />
                    <br />
                  </li>
                  <li>
                    Understand what &quot;state memory&quot; is and be able to
                    create subprograms that do, or do not, exhibit &quot;state
                    memory&quot;.<br />
                    <br />
                  </li>
                  <li>
                    Understand the<font size="-1"> IS COMMON</font>,
                    <font size="-1">IS GLOBAL</font> and
                    <font size="-1">IS EXTERNAL</font> clauses.<br />
                    <br />
                  </li>
                  <li>Be able to create subprograms of good quality.</li>
                </ol>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="top"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="308"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Prerequisites</font
                  >
                </h4>
              </td>
              <td width="525" height="308" valign="top">
                <p>
                  Introduction to COBOL <br />
                  Declaring data in COBOL<br />
                  Basic Procedure Division commands <br />
                  Selection in COBOL<br />
                  Iteration in COBOL <br />
                  Introduction to Sequential files<br />
                  Processing Sequential files<br />
                  Reading Sequential Files <br />
                  Edited Pictures <br />
                  The USAGE clause<br />
                  COBOL print files and variable-length records<br />
                  Sorting and Merging<br />
                  Introduction to direct access files<br />
                  Relative Files<br />
                  Indexed Files <br />
                  Using tables<br />
                  Creating tables - syntax and semantics<br />
                  Searching tables<br />
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top" align="left" bgcolor="#FFFFFF" colspan="2">
                <div align="center">
                  <hr />
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" align="LEFT" bgcolor="#993300" colspan="2">
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="part1"></a>
                    <font face="Arial, Helvetica, sans-serif"
                      >The CALL verb</font
                    ></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="392"
              >
                <h4>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    ><b>Introduction</b></font
                  >
                </h4>
                <h4>&nbsp;</h4>
                <div align="center">
                  <img
                    src="/cobol/course/Resources/pics/i-Detail.gif"
                    width="30"
                    height="37"
                  />
                </div>
                <div align="center">
                  <p>
                    <font size="-1"><br /> </font
                    ><font size="-1"
                      >Your vendor will have supplied a Linker with your COBOL
                      development system. You will have to read the vendor
                      manual for the specifics of how it works.</font
                    ><br />
                  </p>
                </div>
              </td>
              <td width="525" valign="top" height="392">
                <p>
                  A large software system is not usually written as a single
                  monolithic program. Instead, it consists of a main program and
                  many independently compiled subprograms, linked together to
                  form one executable run-unit.
                </p>
                <p>
                  A subprogram is the name we give to a program that is invoked
                  from another program.
                </p>
                <p>
                  The object code of separately compiled subprograms has to be
                  linked together into one executable run-unit by a special
                  program called a &quot;Linker&quot;.
                </p>
                <p>
                  One purpose of the Linker is to resolve the subprogram names
                  (given in the <font size="-1">PROGRAM-ID</font> clause) into
                  actual physical addresses so that the computer can find a
                  particular subprogram when it is invoked.<br />
                </p>
                <p>
                  In a system consisting of a main program and linked
                  subprograms, there must be a mechanism that allows one program
                  to invoke another and to pass data to it. In many programming
                  languages, the procedure or function call serves this purpose.
                </p>
                <p>
                  In COBOL, the <font size="-1">CALL </font>verb is used to
                  invoke one program from another.
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="141"
              >
                <h4>
                  <font color="#800000"
                    ><b
                      ><font face="Arial, Helvetica, sans-serif"
                        >CALL verb semantics</font
                      ></b
                    ></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="141">
                <p>
                  The <font size="-1">CALL</font> verb transfers control to a
                  subprogram. When the subprogram has finished, control returns
                  to the statement that follows the
                  <font size="-1">CALL</font> in the calling program.
                </p>
                <p>
                  The called program may be an independently compiled program,
                  or it may be contained within the text of the calling program
                  (i.e. it may be a contained subprogram).
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="57"
              >
                <p>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    ><b>CALL syntax and notes</b></font
                  >
                </p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p align="center">
                  <img
                    src="Resources/pics/i-BugAlert.gif"
                    width="56"
                    height="62"
                  />
                </p>
                <p align="center">
                  <font size="-1"
                    >Passing parameters of incorrect types to a called program
                    is a frequent source of program failure (crashes).<br /> </font
                  ><font size="-1"
                    >Always double check to make sure that the types of the
                    parameters passed by the caller program are in agreement
                    with those declared in the LINKAGE SECTION of the called
                    program.</font
                  >
                </p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
              </td>
              <td width="525" valign="top" height="57">
                <p align="center">
                  <img
                    src="Resources/pics/Call1.gif"
                    width="480"
                    height="208"
                  />
                </p>
                <p align="left"><b>CALL notes</b></p>
                <ol>
                  <li>
                    If the <font size="-1">CALL</font> passes parameters, then
                    the called program must have a
                    <font size="-1">USING</font> phrase after the
                    <font size="-1 ">PROCEDURE DIVISION</font> header and a
                    <font size="-1">LINKAGE SECTION</font> to describe the
                    parameters passed.<br />
                    <br />
                  </li>
                  <li>
                    The <font size="-1">CALL</font> statement has a
                    <font size="-1">USING</font> phrase only if a
                    <font size="-1">USING</font> phrase is used in the
                    <font size="-1">PROCEDURE DIVISION</font> header of the
                    called program.<br />
                    <br />
                  </li>
                  <li>
                    Both <font size="-1">USING</font> phrases must have the same
                    number of parameters.<br />
                    <br />
                  </li>
                  <li>
                    Unlike languages like Modula-2, COBOL does not check the
                    type of the parameters passed to a called program. It is the
                    programmer's responsibility to make sure that only
                    parameters of the correct type and size are passed.<br />
                    <br />
                  </li>
                  <li>
                    Parameters passed from the calling program to the called
                    program correspond by position, not by name. That is, the
                    first parameter in the <font size="-1">USING</font> phrase
                    of the <font size="-1">CALL</font> corresponds to the first
                    in the <font size="-1">USING</font> phase of the called
                    program, and so on.<br />
                    <br />
                    <img
                      src="Resources/pics/Call2.gif"
                      width="524"
                      height="354"
                    /><br />
                    <br />
                    <br />
                  </li>
                  <li>
                    If the program being called has not been linked (does not
                    exist in the executable image,) the statement block
                    following the
                    <font size="-1">ON EXCEPTION/OVERFLOW</font> will execute.
                    Otherwise, the program will terminate abnormally.<br />
                    <br />
                  </li>
                  <li>
                    <font size="-1">BY REFERENCE </font>is the default passing
                    mechanism, and so is sometimes omitted.<br />
                    <br />
                  </li>
                  <li>
                    Note that vendors often extend the
                    <font size="-1">CALL </font>by introducing
                    <font size="-1">BY VALUE</font> parameter passing, and by
                    including a <font size="-1">GIVING</font> phrase. These are
                    non-standard extensions.<br />
                  </li>
                </ol>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="423"
              >
                <font face="Arial, Helvetica, sans-serif" color="#800000"
                  ><b>Parameter passing mechanisms</b></font
                >
              </td>
              <td width="525" valign="top" height="423">
                <p>
                  In standard COBOL, the <font size="-1">CALL</font> verb has
                  two parameter passing mechanisms - <br />
                  <font size="-1">BY REFERENCE</font> and
                  <font size="-1">BY CONTENT</font>.
                </p>
                <ul>
                  <li>
                    <font size="-1"><b>BY REFERENCE</b></font> is used when the
                    called program needs to pass data back to the caller.<br />
                    <br />
                  </li>
                  <li>
                    <b><font size="-1">BY CONTENT</font></b> is used when data
                    needs to be passed to, but not received from, the called
                    program.
                  </li>
                </ul>
                <p>
                  The diagrams and explanations below show how these mechanisms
                  work.
                </p>
                <p align="left">
                  <b>CALL..BY REFERENCE</b><br />
                  When data is passed <font size="-1">BY REFERENCE</font>, the
                  address of the data-item is supplied to the called subprogram.
                  So any changes made to the data-item in the subprogram are
                  also made to the data-item in the main program because both
                  items refer to the same memory location.
                </p>
                <p align="center">
                  <img
                    src="Resources/pics/Call3.gif"
                    width="490"
                    height="164"
                  />
                </p>
                <p align="center">&nbsp;</p>
                <p>
                  <b>CALL..BY CONTENT<br /> </b>When a parameter is passed
                  <font size="-1">BY CONTENT</font> a copy of the data-item is
                  made and the address of the copy is supplied to subprogram.
                  Any changes made to the data-item in the subprogram affect
                  only the copy.
                </p>
                <p align="center">
                  <img
                    src="Resources/pics/Call4.gif"
                    width="489"
                    height="193"
                  />
                </p>
                <p>&nbsp;</p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="1262"
              >
                <p>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    ><b>CALL example</b></font
                  >
                </p>
                <p>&nbsp;</p>
              </td>
              <td width="525" valign="top" height="1262">
                <p>
                  The example fragments below show how a
                  <font size="-1">CALL</font> statement is made in a calling
                  program to invoke and pass parameters to a subprogram (shown
                  in outline).
                </p>
                <p>&nbsp;</p>
                <table
                  width="399"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td>
                      <pre><B>
CALL &quot;DateValidate&quot;<BR>     USING BY CONTENT TempDate<BR>     USING BY REFERENCE DateCheckResult.<BR></B></pre>
                    </td>
                  </tr>
                </table>
                <div align="center">
                  The <font size="-1">CALL</font> statement in the calling
                  program.<br />
                </div>
                <p>&nbsp;</p>
                <table
                  width="374"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td>
                      <pre><B><BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID DateValidate IS INITIAL.<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>          ? ? ? ? ? ? ? ? ? ? ? ? <BR>LINKAGE SECTION.<BR>01  DateParam            PIC X(8).<BR>01  DateResult           PIC 9.<BR>PROCEDURE DIVISION USING DateParam, DateResult.<BR>Begin. <BR>       ? ? ? ? ? ? ? ? ? ? ? ? <BR>       ? ? ? ? ? ? ? ? ? ? ? ?<BR>       EXIT PROGRAM.<BR>??????.<BR>       ? ? ? ? ? ? ? ? ? ? ? ?<BR><BR></B></pre>
                    </td>
                  </tr>
                </table>
                <div align="center">
                  <p>Outline of the called program</p>
                  <p align="left">
                    <b>Notes<br /> </b>Note that the name given in the
                    <font size="-1">CALL </font>statement (i.e.
                    &quot;DateValidate&quot;) corresponds with the name given in
                    the <font size="-1">PROGRAM-ID</font> of the called program.
                    The main purpose of the
                    <font size="-1">PROGRAM-ID</font> clause is to identify
                    programs within a run-unit (i.e. a set of programs that have
                    been compiled and linked into one executable image) and the
                    <font size="-1">CALL</font> transfers control from one
                    program in the run-unit to another.
                  </p>
                </div>
                <p>
                  Note that the subprogram has a
                  <font size="-1">LINKAGE SECTION </font>where the parameters
                  passed to it are defined.
                </p>
                <p>
                  Note that the names of the parameters passed by the
                  <font size="-1">CALL </font>statement in the main program are
                  different from those in the called subprogram. This is because
                  it is the positions of the parameters following their
                  respective <font size="-1">USING</font> clauses that is
                  significant, not the names used.
                </p>
                <p>
                  In this case <i>TempDate</i> corresponds to
                  <i>DateParam</i> and <i>DateCheckResult</i> to
                  <i>DateResult</i>.
                </p>
                <blockquote>
                  <p>
                    <i>TempDate</i> is a parameter passed to the subprogram<font
                      size="-1"
                    >
                      BY CONTENT</font
                    >. This means that no matter what the subprogram does to the
                    value in the corresponding <i>DateParam</i>, the original
                    value of <i>TempDate</i> will be unaffected.
                  </p>
                  <p>
                    By contrast, <i>DateCheckResult</i> is passed
                    <font size="-1">BY REFERENCE </font>and this means that any
                    changes to the value in the corresponding
                    <i>DateResult </i>are reflected by a change in value of
                    <i>DateCheckResult</i> in the main program.
                  </p>
                </blockquote>
                <p>
                  Passing parameters <font size="-1">BY REFERENCE</font> is the
                  mechanism by which data is passed from a called subprogram to
                  the main program. In this example, what is being passed back
                  is a code indicating the success or failure of the validation.
                </p>
                <p>
                  <font size="-1">BY REFERENCE</font> should be used only when
                  you require a subprogram to pass data back to the main
                  program. It is a principle of modular design (i.e. a design
                  where the system is broken into a number of subprograms.
                  rather than consisting of a single monolithic program) that
                  the data connection between modules should be as limited as
                  possible.
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="1355"
              >
                <font face="Arial, Helvetica, sans-serif" color="#800000"
                  ><b>State memory and the IS INITIAL clause</b></font
                >
              </td>
              <td width="525" valign="top" height="1355">
                <p>
                  <b>The IS INITIAL phrase</b><br />
                  The first time a subprogram is called, it is in its initial
                  state: all files are closed and the data-items are initialized
                  to their
                  <font size="-1">VALUE</font> clauses.
                </p>
                <p>
                  The next time it is called, it remembers its state from the
                  previous call. Any files that were opened are still open, and
                  any data-items that were assigned values still contain those
                  values.
                </p>
                <p>
                  Although it can be useful for a subprogram to remember its
                  state from call to call, systems that contain subprograms.
                  with &quot;state memory&quot; are often less reliable and more
                  difficult to debug than those that do not.
                </p>
                <p>
                  A subprogram can be forced into its initial state each time it
                  is called, by including the
                  <font size="-1">IS INITIAL</font> clause in the
                  <font size="-1">PROGRAM-ID</font>.
                </p>
                <p>
                  In the examples below, the subprogram &quot;Steadfast&quot;
                  produces the same result every time it is called with the same
                  parameter value. But &quot;Fickle&quot;, because it remembers
                  its state from the previous call, will produce different
                  results when called with the same value.
                </p>
                <p>&nbsp;</p>
                <div align="center">
                  <table
                    width="412"
                    border="1"
                    background="Resources%5Cpics%5Ccode.gif"
                    cellpadding="5"
                  >
                    <tr>
                      <td width="0" height="322" valign="top">
                        <pre><B>
? ? ? ? ? ? ? ? ? ? 
MOVE 12 TO IncrementVal.
CALL &quot;Steadfast&quot; USING BY CONTENT IncrementVal.<BR>
MOVE 5 TO IncrementVal
CALL &quot;Steadfast&quot; USING BY CONTENT IncrementVal.<BR>
MOVE 12 TO IncrementVal.
CALL &quot;Steadfast&quot; USING BY CONTENT IncrementVal.<BR>
? ? ? ? ? ? ? ? ? ? 
MOVE 12 TO IncrementVal.
CALL &quot;Fickle&quot; USING BY CONTENT IncrementVal.<BR>
MOVE 5 TO IncrementVal.
CALL &quot;Fickle&quot; USING BY CONTENT IncrementVal.
MOVE 12 TO IncrementVal.
CALL &quot;Fickle&quot; USING BY CONTENT IncrementVal.
? ? ? ? ? ? ? ? ? ? <BR></B></pre>
                      </td>
                    </tr>
                  </table>
                  Statements in the calling program<br />
                </div>
                <p><br /></p>
                <p>&nbsp;</p>
                <table
                  width="439"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td height="318" valign="top">
                      <pre><B>      $SET SOURCEFORMAT&quot;FREE&quot;<BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. Steadfast IS INITIAL.</B></PRE>
                      <pre><B>DATA DIVISION.
WORKING-STORAGE SECTION.
01 RunningTotal PIC 9(5) VALUE 50.</B></PRE>
                      <pre><B>LINKAGE SECTION.
01 ParamValue PIC 99.</B></PRE>
                      <pre><B>PROCEDURE DIVISION USING ParamValue.
Begin.
   ADD ParamValue TO RunningTotal.
   DISPLAY &quot;Total = &quot;, RunningTotal.
   EXIT PROGRAM.</B><B><BR></B></pre>
                    </td>
                    <td valign="top" height="318" bgcolor="#FFFFFF">
                      <div align="left">
                        <div align="center">
                          <b>Example Runs<br /> </b
                          ><font size="-1">The parameter </font
                          ><font size="-1">
                            value is shown in
                            <font color="#0000FF">blue</font> and the result
                            displayed is shown in
                            <font color="#FF0000">red</font>.
                            <br />
                          </font>
                        </div>
                        <hr />
                        <div align="center">
                          <font size="-2">First Run</font><br />
                        </div>
                        <div align="center">
                          <font color="#0000FF"
                            ><b
                              ><font face="Arial, Helvetica, sans-serif"
                                >12</font
                              ></b
                            ></font
                          ><b
                            ><font face="Arial, Helvetica, sans-serif"
                              ><br />
                              <font color="#FF0000">Total = 62</font></font
                            ></b
                          >
                        </div>
                        <hr align="center" />
                        <div align="center">
                          <font size="-2">Second Run</font><br />
                        </div>
                        <div align="center">
                          <font color="#0000FF"
                            ><b
                              ><font face="Arial, Helvetica, sans-serif"
                                >5</font
                              ></b
                            ></font
                          ><b
                            ><font face="Arial, Helvetica, sans-serif"
                              ><br />
                              <font color="#FF0000">Total = 55</font></font
                            ></b
                          >
                        </div>
                        <hr align="center" />
                        <div align="center">
                          <font size="-2">Third Run</font><br />
                        </div>
                        <div align="center">
                          <font color="#0000FF"
                            ><b
                              ><font face="Arial, Helvetica, sans-serif"
                                >12</font
                              ></b
                            ></font
                          ><b
                            ><font face="Arial, Helvetica, sans-serif"
                              ><br />
                              <font color="#FF0000">Total = 62</font></font
                            ></b
                          >
                        </div>
                      </div>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <p>
                  In &quot;Steadfast&quot;, no matter how many times we run the
                  program, when the parameter value is the same - the result is
                  the same. For instance, on the first and third runs of the
                  program the parameter has the value 12 and each time the
                  result is 62 (12+50).
                </p>
                <p>&nbsp;</p>
                <table
                  width="439"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td height="330" valign="top">
                      <pre><B>      $SET SOURCEFORMAT&quot;FREE&quot;<BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. Fickle.
<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01 RunningTotal   PIC 9(5) VALUE 50.
<BR>LINKAGE SECTION.<BR>01 ParamValue     PIC 99.
<BR>PROCEDURE DIVISION USING ParamValue.<BR>Begin.<BR>   ADD ParamValue TO RunningTotal.<BR>   DISPLAY &quot;Total = &quot;, RunningTotal.<BR>   EXIT PROGRAM.</B><B><BR></B></pre>
                    </td>
                    <td valign="top" height="330" bgcolor="#FFFFFF">
                      <div align="left">
                        <div align="center">
                          <b>Example Runs<br /> </b
                          ><font size="-1">The parameter </font
                          ><font size="-1">
                            value is shown in
                            <font color="#0000FF">blue</font> and the result
                            displayed is shown in
                            <font color="#FF0000">red</font>.
                            <br />
                          </font>
                        </div>
                        <hr />
                        <div align="center">
                          <font size="-2">First Run</font><br />
                          <font size="-1"> </font>
                        </div>
                        <div align="center">
                          <font color="#0000FF"
                            ><b
                              ><font face="Arial, Helvetica, sans-serif"
                                >12</font
                              ></b
                            ></font
                          ><b
                            ><font face="Arial, Helvetica, sans-serif"
                              ><br />
                              <font color="#FF0000">Total = 62</font></font
                            ></b
                          >
                        </div>
                        <hr align="center" />
                        <div align="center">
                          <font size="-2">Second Run</font><br />
                        </div>
                        <div align="center">
                          <div>
                            <font color="#0000FF"
                              ><b
                                ><font face="Arial, Helvetica, sans-serif"
                                  >5</font
                                ></b
                              ></font
                            ><b
                              ><font face="Arial, Helvetica, sans-serif"
                                ><br />
                                <font color="#FF0000">Total = 67</font></font
                              ></b
                            >
                          </div>
                          <hr />
                          <font size="-2">Third Run</font><br />
                          <div align="center">
                            <font color="#0000FF"
                              ><b
                                ><font face="Arial, Helvetica, sans-serif"
                                  >12</font
                                ></b
                              ></font
                            ><b
                              ><font face="Arial, Helvetica, sans-serif"
                                ><br />
                                <font color="#FF0000">Total = 79</font></font
                              ></b
                            >
                          </div>
                        </div>
                      </div>
                    </td>
                  </tr>
                </table>
                <p>
                  In &quot;Fickle&quot; the result produced by running the
                  program depends on what the program &quot;remembers&quot; from
                  the last time it was run. In the example runs, even though the
                  parameter value is the same on the first and third runs, the
                  result produced is different. On the first run the result is
                  62 (12+50) but on the third run, even though the value of the
                  parameter is still 12, the program &quot;remembers&quot; the
                  value of <i>RunningTotal</i> from the previous run and
                  produces a result of 79 (12+67).
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="457"
              >
                <h4>
                  <font face="Arial, Helvetica, sans-serif" color="#800000"
                    ><b>State memory and the CANCEL verb</b></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="457">
                <p>
                  Sometimes a program only needs &quot;state memory&quot; part
                  of the time. That is, it needs to be reset to its initial
                  state periodically.
                </p>
                <p>
                  In COBOL this can be done by means of the
                  <font size="-1">CANCEL</font> verb/command.
                </p>
                <p>
                  The syntax of the <font size="-1">CANCEL</font> verb is as
                  follows
                </p>
                <p align="center">
                  <img src="Resources/pics/Call5.gif" width="264" height="71" />
                </p>
                <p>
                  When the <font size="-1">CANCEL</font> command is executed,
                  the memory space occupied by the subprogram is freed and if
                  the subprogram is called again it will be in its initial state
                  (i.e. all files closed and the data-items initialized to their
                  <font size="-1">VALUE</font> clauses).
                </p>
                <p>By using the following statements in our main program</p>
                <blockquote>
                  <pre><B>CALL &quot;Fickle&quot; USING BY CONTENT IncValue.
CANCEL &quot;Fickle&quot;
CALL &quot;Fickle&quot; USING BY CONTENT IncValue</B>.</PRE>
                </blockquote>
                <p>
                  we can force &quot;Fickle&quot; to act like
                  &quot;Steadfast&quot;.<br />
                </p>
                <hr width="100%" align="center" size="1" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="388"
              >
                <h4>
                  <b
                    ><font face="Arial, Helvetica, sans-serif" color="#800000"
                      >Subprogram clauses and verbs</font
                    ></b
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="388">
                <p>
                  COBOL subprograms. are identical to standard COBOL programs
                  with the following exceptions:
                </p>
                <ol>
                  <li>
                    The <font size="-1">PROGRAM-ID</font> may take the
                    <font size="-1">IS INITIAL</font> and
                    <font size="-1">IS COMMON PROGRAM</font> clauses.<br />
                    <br />
                  </li>
                  <li>
                    When parameters are passed to the subprogram, the
                    <font size="-1">PROCEDURE DIVISION</font> header of the
                    subprogram must have the
                    <font size="-1">USING </font>phrase.<br />
                    <br />
                  </li>
                  <li>
                    When there are parameters, the
                    <font size="-1">DATA DIVISION</font> of the subprogram must
                    have a <font size="-1">LINKAGE SECTION</font> where the
                    items specified in the <font size="-1">USING</font> phrase
                    are declared.<br />
                    <br />
                  </li>
                  <li>
                    The <font size="-1">EXIT PROGRAM</font> statement is used
                    where the <font size="-1">STOP RUN</font> would be used in a
                    standard COBOL program. <br />
                    An <font size="-1">EXIT PROGRAM</font> statement has the
                    effect of stopping the subprogram and returning control to
                    the calling program. <br />
                    The difference between a <font size="-1">STOP RUN </font>and
                    an <font size="-1">EXIT PROGRAM</font> statement is that the
                    <font size="-1">STOP RUN</font> causes the whole run-unit to
                    stop (even if it is encountered in a subprogram) instead of
                    just the subprogram<br />
                    <br />
                  </li>
                  <li>
                    Contained subprograms. must end with the
                    <font size="-1">END PROGRAM</font> statement. The END
                    PROGRAM statement delimits the scope of a contained
                    subprogram<br />
                  </li>
                </ol>
              </td>
            </tr>
            <tr>
              <td valign="top" align="left" bgcolor="#FFFFFF" colspan="2">
                <div align="center">
                  <hr width="100%" />
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" align="LEFT" bgcolor="#993300" colspan="2">
                <h2 align="CENTER">
                  <font color="#FFFF00"
                    ><a name="part2"></a
                    ><font face="Arial, Helvetica, sans-serif"
                      >Contained Subprograms</font
                    ></font
                  >
                </h2>
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="131"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Introduction</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="131">
                <p align="left">
                  COBOL subprograms can be independently compiled separate
                  programs (linked into a single executable run-unit) or they
                  can be contained within the text of a containing program.
                </p>
                <p align="left">
                  Contained subprograms. are very similar to the procedures (or
                  user defined functions) found in other languages except that
                  they are invoked with the <font size="-1">CALL</font> verb and
                  are better protected against accidental data corruption.
                </p>
                <ol>
                  <li>
                    In the procedures used in other languages all external
                    data-items are visible within the procedure unless they are
                    explicitly redeclared as local data-items.<br />
                    <br />
                  </li>
                  <li>
                    In COBOL's contained subprograms, no external data-items are
                    visible within the contained subprogram, unless this has
                    been explicitly permitted by using the
                    <font size="-1">IS GLOBAL</font> clause in the data
                    declaration. <br />
                  </li>
                </ol>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="319"
              >
                <font color="#800000" face="Arial, Helvetica, sans-serif"
                  ><b> Defining a contained subprogram</b></font
                >
              </td>
              <td width="525" valign="top" height="319">
                <p align="left">
                  When contained subprograms are used, the end of the main
                  program, and each subprogram, is signalled by means of the
                  <font size="-1">END PROGRAM</font> statement. This has the
                  format:
                </p>
                <p align="center">
                  <b
                    ><font face="Arial, Helvetica, sans-serif"
                      >END PROGRAM ProgramIdName.</font
                    ></b
                  >
                </p>
                <p align="center"><br /></p>
                <b
                  ><font face="Arial, Helvetica, sans-serif"
                    >Contained subprogram restrictions</font
                  ></b
                ><b><br /> </b>Contained subprograms have the following
                restrictions:<br />
                <ol>
                  <li>
                    Although contained subprograms can be nested, a contained
                    subprogram can only be called by the immediate containing
                    program or by a subprogram at the same level. <br />
                    <br />
                  </li>
                  <li>
                    Contained subprograms. can only call a subprogram at the
                    same level if the called program uses the
                    <font size="-1">IS COMMON PROGRAM</font> clause in its
                    <font size="-1">PROGRAM-ID.</font>
                    <br />
                    <br />
                  </li>
                </ol>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="210"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    ><b>The IS GLOBAL clause</b></font
                  >
                </h4>
                <h4>&nbsp;</h4>
                <h4 align="center"><font size="-1"> </font></h4>
              </td>
              <td width="525" valign="top" height="210">
                <p align="left">
                  As noted above, data-items declared outside the scope of a
                  contained subprogram cannot be seen within the subprogram.
                </p>
                <p align="left">
                  Sometimes however, you may want to share some data-item within
                  a number of contained subprograms.
                </p>
                <p align="left">
                  For instance, in the example program fragments below, we want
                  both of our subprograms to be able to access the
                  <i>NameTable</i>.
                </p>
                <p align="left">
                  When we want a data-item to be seen within contained
                  subprograms we simply follow the item declaration with the
                  <font size="-1">IS GLOBAL</font> clause.
                </p>
                <p align="left">
                  The <font size="-1">IS GLOBAL</font> clause specifies that the
                  data item is to be visible within any subordinate contained
                  subprograms.
                </p>
                <table
                  width="383"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td width="0" height="472">
                      <pre>      <B>$SET SOURCEFORMAT&quot;FREE&quot;<BR>      $SET NESTCALL<BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. ContainerProgram.
   ? ? ? ? ? ? ? ? ?<BR><FONT color="#FF0000">01 NameTable IS GLOBAL.
<FONT size="-1">   02 SName OCCURS 200 TIMES PIC X(20).</FONT></FONT><FONT size="-1">
   </FONT>? ? ? ? ? ? ? ? ? <BR>PROCEDURE DIVISION.
   ? ? ? ? ? ? ? ? ?
   CALL &quot;PutToTable&quot; USING ???
   ? ? ? ? ? ? ? ? ?
   CALL &quot;ReportFromTable&quot;
   ? ? ? ? ? ? ? ? ? <BR>   EXIT PROGRAM.
<BR><FONT color="#0000CC">IDENTIFICATION DIVISION.<BR>PROGRAM-ID. PutToTable.<BR>   ? ? ? ? ? ? ? ? ?</FONT><FONT color="#0000FF">
  <FONT color="#FF0000"> MOVE StudName TO SName(SNum).</FONT><BR><FONT color="#0000CC">   ? ? ? ? ? ? ? ? ? 
   EXIT PROGRAM<BR>END-PROGRAM PutToTable.</FONT></FONT>

<FONT color="#0000CC">IDENTIFICATION DIVISION.<BR>PROGRAM-ID. ReportFromTable.<BR>   ? ? ? ? ? ? ? ? ?</FONT><FONT color="#0000FF">
   <FONT color="#FF0000">DISPLAY &quot;Student &quot; SNum &quot; = &quot; SName(SNum).</FONT><BR><FONT color="#0000CC">   ? ? ? ? ? ? ? ? ? 
   EXIT PROGRAM<BR>END-PROGRAM ReportFromTable.</FONT></FONT><BR>END-PROGRAM ContainerProgram.</B></PRE>
                    </td>
                  </tr>
                </table>
                <p align="left">&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="1127"
              >
                <h4>
                  <font face="Arial, Helvetica, sans-serif" color="#800000">
                    Information Hiding using the IS GLOBAL clause and contained
                    subprograms</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="1127">
                <p align="left">
                  Contained subprograms. seem to offer us the opportunity to
                  create some form of Information Hiding. For instance, it looks
                  as though we could create an Informational Strength module as
                  defined by Myres (<font size="-1"
                    >Myres, G.J. <i>Composite/Structured Design.</i> 1979</font
                  >) by hiding a table declaration within a containing program
                  and then allowing access to it through the contained
                  subprograms. (see diagram below).
                </p>
                <p align="left">&nbsp;</p>
                <p align="center">
                  <img
                    src="Resources/pics/call6.gif"
                    width="401"
                    height="206"
                  />
                </p>
                <p align="left">
                  Unfortunately, this arrangement is not allowed in COBOL
                  because, although subprograms. may be nested, a contained
                  subprogram can only be called by the immediate containing
                  program or by a subprogram at the same level. So in the
                  diagram above, the main program would not be allowed direct
                  access to the contained subprograms.
                </p>
                <p align="left">
                  The only way any kind of Informational Strength module can be
                  achieved is for the MainProgram to call the ContainerProgram
                  and for the ContainerProgram to call the appropriate
                  subprogram as shown below.
                </p>
                <p align="left">
                  To do this the MainProgram would have to pass some sort of
                  code to the ContainerProgram to tell it which of the
                  subprograms to use and the parameter list passed to the
                  ContainerProgram would have to be wide enough to accommodate
                  the needs of the contained subprograms. This does not cause
                  much of a problem in the example below, but in a case where
                  the contained programs had more significant data needs it
                  could prove a serious drawback.
                </p>
                <p align="left">
                  Glenford Myres (<font size="-1"
                    >Myres, G.J. <i>Composite/Structured Design.</i> 1979</font
                  >) has produced criteria for deciding whether a module (i.e. a
                  subprogram) is good or bad. Module Coupling (i.e. the data
                  connections between modules) is one of the criteria he
                  considers. According to his criteria the ContainerProgram
                  below exhibits both Stamp and Control coupling.
                </p>
                <p align="center">
                  <img
                    src="Resources/pics/Call7.gif"
                    width="406"
                    height="286"
                  />
                </p>
                <p align="left">&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="376"
              >
                <b
                  ><font color="#800000" face="Arial, Helvetica, sans-serif"
                    >The IS COMMON PROGRAM clause</font
                  ></b
                >
              </td>
              <td width="525" valign="top" height="376">
                <p>
                  A programmer pondering the problem outlined above - how to get
                  an external program to make direct calls to the subprograms
                  contained within a container might be excited to come across
                  the <font size="-1">IS COMMON PROGRAM </font>clause. He might
                  be forgiven for thinking for a moment that this clause was the
                  solution to his problem. Sadly this is not the case.
                </p>

                <p>
                  The <b>only use</b> of the
                  <font size="-1">IS COMMON PROGRAM </font>clause is to allow a
                  subprogram to call one of its sibling subprograms. (i.e. a
                  subprogram at the same level).
                </p>

                <p>
                  Contained subprograms can only call a subprogram at the same
                  level if the called program uses the
                  <font size="-1">IS COMMON PROGRAM</font> phrase in its
                  <font size="-1">PROGRAM-ID</font>. For instance in the example
                  below <i>DisplayData</i> is called by the main program and by
                  its sibling <i>InsertData</i> but <i>InsertData</i> cannot
                  call <i>DisplayData</i>.
                </p>

                <p>
                  The syntax diagram for the
                  <font size="-1">IS INITIAL</font> and
                  <font size="-1">IS COMMON</font> clauses is shown below. As
                  you can see from the diagram both the
                  <font size="-1">COMMON</font> and
                  <font size="-1">INITIAL</font> clauses may be used in
                  combination. The words<font size="-1"> IS</font> and
                  <font size="-1">PROGRAM</font> are noise words which may be
                  omitted.
                </p>

                <p align="center">
                  <img src="Resources/pics/Call8.gif" width="495" height="23" />
                </p>
                <p>&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="161"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    ><b
                      >Example program using contained subprograms. and the IS
                      COMMON PROGRAM and IS GLOBAL clauses</b
                    ></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="161">
                <p>
                  In this example, <i>SharedItem</i> can be accessed in the main
                  program and in each of the subprograms because this has been
                  explicitly specified in the data declaration by using the
                  <font size="-1">IS GLOBAL</font> clause.
                </p>
                <p>
                  Note that &quot;<font size="-1">$ SET NESTCALL</font>&quot; is
                  a compiler directive for Microfocus NetExpress telling the
                  compiler to expect contained subprograms. It is not standard
                  COBOL.
                </p>
                <table
                  width="374"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td width="0" height="472" valign="top">
                      <pre>      <B>$SET SOURCEFORMAT&quot;FREE&quot;<BR>      $SET NESTCALL<BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. MainProgram.<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01 SharedItem     PIC X(25) IS GLOBAL.<BR>PROCEDURE DIVISION.
Begin.<BR>    CALL &quot;InsertData&quot;<BR>    MOVE &quot;Main can also use the share&quot; TO SharedItem<BR>    CALL &quot;DisplayData&quot;<BR>    STOP RUN.
<FONT color="#000099"><BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. InsertData.<BR>PROCEDURE DIVISION.
Begin.<BR>    MOVE &quot;Shared area works&quot; TO SharedItem<BR>    CALL &quot;DisplayData&quot;<BR>    EXIT PROGRAM.<BR>END PROGRAM InsertData.</FONT>
<BR><FONT color="#000099">IDENTIFICATION DIVISION.<BR>PROGRAM-ID. DisplayData IS COMMON PROGRAM.<BR>PROCEDURE DIVISION.
Begin.<BR>    DISPLAY SharedItem.<BR>    EXIT PROGRAM<BR>END PROGRAM DisplayData.</FONT>
<BR>END PROGRAM MainProgram.<BR></B></pre>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="2123"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Example program using the IS INITIAL and IS COMMON clauses
                    and the CANCEL command.</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="2123">
                <p>
                  In the example below the &quot;Fickle&quot; and
                  &quot;Steadfast&quot; subprograms are revisited. This time
                  they have been incorporated into the text of a main,
                  containing program.
                </p>
                <p>
                  The first part of the main program calls &quot;Fickle&quot;
                  and &quot;Steadfast&quot; to demonstrate the difference
                  between a program that has state memory and one that does not.
                </p>
                <p>
                  In the second part of the main program, &quot;Fickle&quot; is
                  used with the <font size="-1">CANCEL </font>command to
                  calculate the square of a number by repeated addition. After
                  the square of a particular number has been calculated the
                  <font size="-1">CANCEL</font> command is used to initialize
                  &quot;Fickle&quot; so that the next number may be computed.
                </p>
                <table
                  width="374"
                  border="1"
                  align="center"
                  background="Resources%5Cpics%5Ccode.gif"
                  cellpadding="5"
                >
                  <tr>
                    <td width="0" height="472" valign="top">
                      <pre><B>      $SET SOURCEFORMAT&quot;FREE&quot;<BR>      $SET NESTCALL<BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. Counter.<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01 Increment      PIC 99 VALUE ZERO.<BR>   88 EndOfData VALUE ZERO.<BR>PROCEDURE DIVISION.<BR>Begin.<BR>* Demonstrates the difference between Fickle<BR>* and Steadfast.  Entering a 0 ends the iteration<BR>  DISPLAY &quot;Enter value - &quot; WITH NO ADVANCING.<BR>  ACCEPT Increment.<BR>  PERFORM UNTIL EndOfData<BR>     CALL &quot;Fickle&quot;    USING BY CONTENT Increment<BR>     CALL &quot;Steadfast&quot; USING BY CONTENT Increment<BR>     DISPLAY &quot;Enter value - &quot; WITH NO ADVANCING<BR>     ACCEPT Increment<BR>  END-PERFORM.
<BR>* Shows how CANCEL may be used to initialise<BR>* Fickle periodically.  Fickle is used to get the<BR>* square of a number by repeated addition.<BR>  DISPLAY &quot;Enter the value to be squared&quot;<BR>  DISPLAY &quot;Value - &quot; WITH NO ADVANCING.<BR>  ACCEPT Increment.<BR>  PERFORM UNTIL EndOfData<BR>     CANCEL &quot;Fickle&quot;<BR>     PERFORM Increment TIMES<BR>       CALL &quot;Fickle&quot; USING BY CONTENT Increment<BR>     END-PERFORM<BR>     DISPLAY &quot;Value - &quot; WITH NO ADVANCING<BR>     ACCEPT Increment<BR>  END-PERFORM.<BR>  STOP RUN.

<BR><FONT color="#000099">IDENTIFICATION DIVISION.<BR>PROGRAM-ID. Fickle.<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01 RunningTotal   PIC 9(5) VALUE ZERO.<BR>LINKAGE SECTION.<BR>01 ParamValue     PIC 99.<BR>PROCEDURE DIVISION USING ParamValue.<BR>Begin.<BR>  ADD ParamValue TO RunningTotal.<BR>  DISPLAY &quot;Fickle total    = &quot; WITH NO ADVANCING<BR>  CALL &quot;DisplayTotal&quot; USING BY CONTENT RunningTotal<BR>  EXIT PROGRAM.<BR>END PROGRAM Fickle.</FONT>

<FONT color="#0000CC"><BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. Steadfast IS INITIAL.<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01 RunningTotal PIC 9(5) VALUE ZERO.<BR>LINKAGE SECTION.<BR>01 ParamValue PIC 99.<BR>PROCEDURE DIVISION USING ParamValue.<BR>Begin.<BR>  ADD ParamValue TO RunningTotal.<BR>  DISPLAY &quot;Steadfast total = &quot; WITH NO ADVANCING<BR>  CALL &quot;DisplayTotal&quot; USING BY CONTENT RunningTotal<BR>  EXIT PROGRAM.<BR>END PROGRAM Steadfast.
</FONT>
<FONT color="#000099"><BR>IDENTIFICATION DIVISION.<BR>PROGRAM-ID. DisplayTotal IS COMMON INITIAL PROGRAM.<BR>DATA DIVISION.<BR>WORKING-STORAGE SECTION.<BR>01 PrnTotal  PIC ZZ,ZZ9.<BR>LINKAGE SECTION.<BR>01 Total     PIC 9(5).<BR>PROCEDURE DIVISION USING Total.<BR>Begin.<BR>  MOVE Total TO PrnTotal.<BR>  DISPLAY PrnTotal.<BR>  EXIT PROGRAM.<BR>END PROGRAM DisplayTotal.</FONT><BR>END PROGRAM Counter.</B></PRE>
                    </td>
                  </tr>
                  <tr>
                    <td width="0" height="505" valign="top" bgcolor="#FFFFFF">
                      <div align="center">
                        <h3><b>Example Run</b></h3>
                        <p>
                          <font size="-1"
                            >Numeric values entered by the user are shown in
                            <font color="#0000FF">blue </font>and values output
                            by the computer are shown in
                            <font color="#FF0000">red</font>.</font
                          >
                        </p>
                      </div>
                      <blockquote>
                        <pre
                          align="left"
                        ><B><FONT color="#000000">Enter value -</FONT> <FONT color="#0000FF">13</FONT>
<FONT color="#000000">Fickle total    = </FONT><FONT color="#FF0000">13</FONT>
<FONT color="#000000">Steadfast total =</FONT><FONT color="#FF0000"> 13</FONT>
Enter value - <FONT color="#0000FF">3</FONT>
<FONT color="#000000">Fickle total    = </FONT><FONT color="#FF0000">16
<FONT color="#000000">Steadfast total = </FONT> 3</FONT>
Enter value - <FONT color="#0000FF">13</FONT>
<FONT color="#000000">Fickle total    = </FONT><FONT color="#FF0000">29
<FONT color="#000000">Steadfast total =</FONT> 13</FONT>
Enter value - <FONT color="#0000FF">0
                       
</FONT>Enter the value to be squared
Value - <FONT color="#0000FF">8</FONT>
<FONT color="#000000">Fickle total =  </FONT><FONT color="#FF0000">8
<FONT color="#000000">Fickle total = </FONT>16
<FONT color="#000000">Fickle total = </FONT>24
<FONT color="#000000">Fickle total = </FONT>32
<FONT color="#000000">Fickle total = </FONT>40
<FONT color="#000000">Fickle total = </FONT>48
<FONT color="#000000">Fickle total = </FONT>56
<FONT color="#000000">Fickle total =</FONT> 64</FONT>
                       
Value - <FONT color="#0000FF">3</FONT>
<FONT color="#000000">Fickle total = </FONT><FONT color="#FF0000"> 3
<FONT color="#000000">Fickle total =</FONT>  6
<FONT color="#000000">Fickle total = </FONT> 9</FONT>
Value - <FONT color="#0000FF">0</FONT></B></PRE>
                      </blockquote>
                    </td>
                  </tr>
                </table>
                <p>&nbsp;</p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="647"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >The IS EXTERNAL clause</font
                  >
                </h4>
                <p align="center">&nbsp;</p>
              </td>
              <td width="525" valign="top" height="647">
                <p>
                  The <font size="-1">IS GLOBAL</font> clause allows a program
                  and its contained subprograms to share access to a data-item.
                </p>
                <p>
                  The <font size="-1">IS EXTERNAL </font>clause does the same
                  for any subprogram in a run-unit (i.e. any linked subprogram).
                  But while the data-item that uses
                  <font size="-1">IS GLOBAL</font> phrase only has to be
                  declared in one place, each of the subprograms that wish to
                  gain access to an <font size="-1">EXTERNAL</font> shared item
                  must declare the item in exactly the same way.
                </p>
                <p>
                  The animation below shows how the
                  <font size="-1">IS EXTERNAL</font> clause works.
                </p>
                <p>
                  In this animation there are four programs in the run-unit.
                  Program B and Program D wish to communicate using a shared
                  data. In COBOL they can do this by using the
                  <font size="-1">IS EXTERNAL</font> clause to set up a shared
                  area of memory but both both programs must contain the
                  declarations below. These set up, and allow access to, the
                  shared area.
                </p>
                <pre>
Example:
     WORKING-STORAGE SECTION.
     01 SharedRec IS EXTERNAL.
        02 PartA     PIC X(4).
        02 PartB     PIC 9(5).
               
             </pre
                >
                <p align="center">
                  SharedRecord<br />
                  Program<br />
                  <a href="Resources/ppz/TC-Call.htm"
                    ><img
                      src="Resources/pics/i-Animation.gif"
                      width="62"
                      height="62"
                      align="middle"
                      border="0"
                  /></a>
                </p>
                <p>
                  The kind of hidden data communication between subprograms that
                  is supported by the <font size="-1">IS EXTERNAL</font> clause
                  is generally regarded as very poor practice. Myres (<font
                    size="-1"
                    >Myres, G.J. <i>Composite/Structured Design.</i> 1979</font
                  >), for instance, indicates that this &quot;Common
                  Coupling&quot; is nearly the worst kind of module coupling
                  possible.
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="312"
              >
                <h4>
                  <font color="#800000" face="Arial, Helvetica, sans-serif"
                    >Designing a modular system</font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="312">
                <p>
                  Anyone who considers creating a system that consists of
                  subprograms and contained subprograms should not embark on
                  such an undertaking without an sound understanding how such a
                  system is designed and what makes a good subprogram and what
                  does not.
                </p>
                <p>
                  This kind of system design is called a modular design and the
                  subprograms are called modules. There are a number of
                  different methods/approaches to designing a modular system but
                  Structured Design is probably the most successful.
                </p>
                <p>
                  It is beyond the scope of this course to provide instruction
                  in Structured Design but programmers tasked with creating a
                  modular system should read these two texts.
                </p>
                <p>
                  Page-Jones, Meilir,
                  <i
                    >Practical guide to Structured Systems Design - Second
                    Edition</i
                  >,<br />
                  Prentice-Hall 1988.
                </p>
                <p>
                  Myers, Glenford, <i>Composite/Structured Design</i>, Von
                  Nostrand Reinhold 19
                </p>
                <hr size="1" width="100%" />
              </td>
            </tr>
            <tr>
              <td
                valign="TOP"
                align="LEFT"
                width="175"
                bgcolor="#FFFFCC"
                height="296"
              >
                <h4>
                  <font color="#800000"
                    ><b
                      ><font face="Arial, Helvetica, sans-serif"
                        >Criteria for module goodness</font
                      ></b
                    ></font
                  >
                </h4>
              </td>
              <td width="525" valign="top" height="296">
                <p>
                  Although this course cannot provide instruction in Structured
                  Design we can observe that the criteria for module goodness
                  specified in that approach boils down to three things:
                </p>
                <ul>
                  <li>
                    A subprogram should perform a single specific function or
                    should co-ordinate its subordinate subprograms such that
                    they perform a single function.<br />
                    <br />
                  </li>
                  <li>
                    A subprogram should only be given access to the data it
                    actually requires to do its job. Even then, the type of
                    access (Read-Only or Read-Write) allowed on the data should
                    be restricted.<br />
                    <br />
                  </li>
                  <li>
                    The data passed to and from the subprogram should be passed
                    through the parameter list in as transparent a manner as
                    possible - there should be no hidden method of data
                    transfer.<br />
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td align="left" bgcolor="#FFFFFF" colspan="2">
                <hr width="100%" />
                <div align="center">
                  <p>
                    <a href="#top">
                      <img
                        src="Resources/pics/i-pagetop.gif"
                        width="132"
                        height="38"
                        border="0"
                    /></a>
                  </p>
                  <hr />
                  <h3 align="center">Copyright Notice</h3>
                  <p align="center">
                    These COBOL course materials are the copyright property of
                    Michael Coughlan.
                  </p>
                  <p align="left">
                    <font size="2"
                      >All rights reserved. No part of these course materials
                      may be reproduced in any form or by any means - graphic,
                      electronic, mechanical, photocopying, printing, recording,
                      taping or stored in an information storage and retrieval
                      system - without the written permission of </font
                    ><font size="2">the author.</font>
                  </p>
                  <p align="center">
                    <font size="2">(c) Michael Coughlan</font>
                  </p>
                  <hr align="left" />
                  <div align="left">
                    <i><font size="-1">Last updated : May 2002</font></i>
                    <br />
                    <font size="-1"
                      ><a href="mailto:michael.coughlan@ul.ie"
                        >e-mail : CSISwebeditor@ul.ie</a
                      ></font
                    >
                  </div>
                </div>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>
  </body>
</html>
